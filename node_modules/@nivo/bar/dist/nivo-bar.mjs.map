{"version":3,"file":"nivo-bar.mjs","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/defaults.ts","../src/renderBar.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/compute/totals.ts","../src/hooks.ts","../src/BarTotals.tsx","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps, BarDatum } from './types'\n\nexport const BarAnnotations = <D extends BarDatum>({\n    bars,\n    annotations,\n}: BarAnnotationsProps<D>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Text } from '@nivo/text'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <D extends BarDatum>({\n    bar: { data, ...bar },\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n    borderRadius,\n    borderWidth,\n    label,\n    shouldRenderLabel,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    tooltip,\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<D>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n                data-testid={`bar.item.${data.id}.${data.index}`}\n            />\n            {shouldRenderLabel && (\n                <Text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        // We don't want the label to intercept mouse events\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </Text>\n            )}\n        </animated.g>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarTooltipProps } from './types'\n\nexport const BarTooltip = <D extends BarDatum>({ color, label, ...data }: BarTooltipProps<D>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport {\n    BarCommonProps,\n    BarDatum,\n    ComputedDatum,\n    BarSvgPropsWithDefaults,\n    BarCanvasPropsWithDefaults,\n} from './types'\nimport { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { renderBar } from './renderBar'\n\nexport const commonDefaultProps: Omit<BarCommonProps<BarDatum>, 'data' | 'theme'> = {\n    indexBy: 'id',\n    keys: ['value'],\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    valueScale: { type: 'linear', nice: true, round: false },\n    indexScale: { type: 'band', round: false },\n    padding: 0.1,\n    innerPadding: 0,\n    enableGridX: false,\n    enableGridY: true,\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { theme: 'labels.text.fill' },\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: (datum: ComputedDatum<BarDatum>) => `${datum.id} - ${datum.indexValue}`,\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps: Omit<\n    BarSvgPropsWithDefaults<BarDatum>,\n    'data' | 'width' | 'height' | 'theme'\n> = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'],\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    barComponent: BarItem,\n    defs: [],\n    fill: [],\n    markers: [],\n    animate: true,\n    animateOnMount: false,\n    motionConfig: 'default',\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps: Omit<\n    BarCanvasPropsWithDefaults<BarDatum>,\n    'data' | 'width' | 'height' | 'theme'\n> = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'],\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    renderBar,\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n}\n","import { roundedRect } from '@nivo/canvas'\nimport { drawCanvasText } from '@nivo/text'\nimport { BarDatum, RenderBarProps } from './types'\n\nexport const renderBar = <D extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        bar: { color, height, width, x, y },\n        borderColor,\n        borderRadius,\n        borderWidth,\n        label,\n        shouldRenderLabel,\n        labelStyle,\n        labelX,\n        labelY,\n        textAnchor,\n    }: RenderBarProps<D>\n) => {\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    roundedRect(ctx, x, y, width, height, Math.min(borderRadius, height))\n    ctx.fill()\n\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (shouldRenderLabel) {\n        ctx.textBaseline = 'middle'\n        ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n        drawCanvasText(ctx, labelStyle, label, x + labelX, y + labelY)\n    }\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { commonDefaultProps } from '../defaults'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <D extends BarDatum>(\n    data: readonly D[],\n    getIndex: (datum: D) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <D extends BarDatum>(data: readonly D[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            }) as D\n    )\n\nexport const filterNullValues = <D extends BarDatum>(data: D) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<D, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<D extends BarDatum>(\n    layout: BarCommonProps<D>['layout'] = commonDefaultProps.layout,\n    reverse: boolean,\n    labelPosition: BarCommonProps<D>['labelPosition'] = commonDefaultProps.labelPosition,\n    labelOffset: BarCommonProps<D>['labelOffset'] = commonDefaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<D extends BarDatum, XScaleInput, YScaleInput> = {\n    data: readonly D[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <D extends BarDatum>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<D>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? (yScale(d) ?? 0) : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<D>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<D> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <D extends BarDatum>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<D>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : (xScale(d) ?? 0))\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<D>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<D> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <D extends BarDatum>({\n    layout,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<D>>,\n    | 'data'\n    | 'height'\n    | 'valueScale'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'padding'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const clampMin = valueScale.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        valueScale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    // As we use extra inner padding between the bars, we need to adjust the bandwidth.\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<D, any, any>,\n        bandwidth,\n        valueScale.reverse ?? false,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<D>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<D extends BarDatum> = SeriesPoint<D>\n\ntype Params<D extends BarDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    innerPadding: number\n    stackedData: Series<D, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <D extends BarDatum>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<D>[] => {\n    const getY = (d: StackDatum<D>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<D>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<D>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<D> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <D extends BarDatum>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<D>[] => {\n    const getX = (d: StackDatum<D>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<D>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<D>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<D> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'valueScale'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'padding'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        valueScale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        valueScale.reverse ?? false,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n    reverse: boolean\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { commonDefaultProps } from '../defaults'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <D extends BarDatum>(\n    bars: ComputedBarDatum<D>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<D>['layout'] = commonDefaultProps.layout,\n    groupMode: BarCommonProps<D>['groupMode'] = commonDefaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useValueFormatter, Margin } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <D extends BarDatum>({\n    indexBy = commonDefaultProps.indexBy,\n    keys = commonDefaultProps.keys,\n    label = commonDefaultProps.label,\n    tooltipLabel = commonDefaultProps.tooltipLabel,\n    valueFormat,\n    colors = commonDefaultProps.colors,\n    colorBy = commonDefaultProps.colorBy,\n    borderColor = commonDefaultProps.borderColor,\n    labelTextColor = commonDefaultProps.labelTextColor,\n    groupMode = commonDefaultProps.groupMode,\n    layout = commonDefaultProps.layout,\n    data,\n    margin,\n    width,\n    height,\n    padding = commonDefaultProps.padding,\n    innerPadding = commonDefaultProps.innerPadding,\n    valueScale = commonDefaultProps.valueScale,\n    indexScale = commonDefaultProps.indexScale,\n    initialHiddenIds = commonDefaultProps.initialHiddenIds,\n    enableLabel = commonDefaultProps.enableLabel,\n    labelSkipWidth = commonDefaultProps.labelSkipWidth,\n    labelSkipHeight = commonDefaultProps.labelSkipHeight,\n    legends = commonDefaultProps.legends,\n    legendLabel,\n    totalsOffset = commonDefaultProps.totalsOffset,\n}: Partial<\n    Pick<\n        BarCommonProps<D>,\n        | 'indexBy'\n        | 'keys'\n        | 'label'\n        | 'tooltipLabel'\n        | 'valueFormat'\n        | 'colors'\n        | 'colorBy'\n        | 'borderColor'\n        | 'labelTextColor'\n        | 'groupMode'\n        | 'layout'\n        | 'padding'\n        | 'innerPadding'\n        | 'valueScale'\n        | 'indexScale'\n        | 'initialHiddenIds'\n        | 'enableLabel'\n        | 'labelSkipWidth'\n        | 'labelSkipHeight'\n        | 'legends'\n        | 'legendLabel'\n        | 'totalsOffset'\n    >\n> & {\n    width: number\n    height: number\n    margin: Margin\n    data: DataProps<D>['data']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<D>>(borderColor, theme)\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<D>>(labelTextColor, theme)\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        data,\n        getIndex,\n        keys,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter((bar): bar is ComputedBarDatumWithValue<D> => bar.data.value !== null)\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const reverse = valueScale.reverse ?? false\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n","import { useTheme } from '@nivo/theming'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n    WithChartRef,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport {\n    BarComponent,\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayerId,\n    BarSvgProps,\n    BarTooltipComponent,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<D extends BarDatum> = Omit<\n    BarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <D extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    layers = svgDefaultProps.layers as BarLayerId[],\n    barComponent = svgDefaultProps.barComponent as unknown as BarComponent<D>,\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n    markers = svgDefaultProps.markers,\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    annotations = svgDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip as BarTooltipComponent<D>,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n    initialHiddenIds,\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n    forwardedRef,\n}: InnerBarProps<D> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<D>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        data,\n        keys,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(\n        layout,\n        valueScale?.reverse ?? false,\n        labelPosition,\n        labelOffset\n    )\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<D>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<D>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<D> = {\n        ...commonProps,\n        margin,\n        width,\n        height,\n        innerWidth,\n        innerHeight,\n        bars,\n        legendData: legendsWithData,\n        enableLabel,\n        xScale,\n        yScale,\n        tooltip,\n        getTooltipLabel,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        getColor,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = forwardRef(\n    <D extends BarDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...props\n        }: BarSvgProps<D>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerBar<D> {...props} isInteractive={isInteractive} forwardedRef={ref} />\n        </Container>\n    )\n) as <D extends BarDatum>(props: WithChartRef<BarSvgProps<D>, SVGSVGElement>) => ReactElement\n","import {\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    ReactElement,\n    Ref,\n} from 'react'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useValueFormatter,\n    WithChartRef,\n    mergeRefs,\n} from '@nivo/core'\nimport { Theme, useTheme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCanvasRenderer,\n    BarCommonProps,\n    BarDatum,\n    BarTooltipComponent,\n    ComputedBarDatum,\n} from './types'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\nconst findBarUnderCursor = <D extends BarDatum>(\n    nodes: ComputedBarDatum<D>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<D extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: Theme,\n    layout: BarCommonProps<D>['layout'] = canvasDefaultProps.layout\n) {\n    setCanvasFont(ctx, theme.labels.text)\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        drawCanvasText(ctx, theme.labels.text, barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<HTMLCanvasElement>\n}\n\nconst InnerBarCanvas = <D extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n    layers = canvasDefaultProps.layers as BarCanvasLayer<D>[],\n    renderBar = canvasDefaultProps.renderBar as unknown as BarCanvasRenderer<D>,\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n    annotations = canvasDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip as BarTooltipComponent<D>,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    forwardedRef,\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<D>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<D>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        data,\n        keys,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<D> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(\n        layout,\n        valueScale?.reverse ?? false,\n        labelPosition,\n        labelOffset\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                setCanvasFont(ctx, theme.text)\n\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        labelStyle: {\n                            ...theme.labels.text,\n                            fill: getLabelColor(bar) as string,\n                        },\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={mergeRefs(canvasEl, forwardedRef)}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <Container\n            isInteractive={isInteractive}\n            renderWrapper={renderWrapper}\n            theme={theme}\n            animate={false}\n        >\n            <InnerBarCanvas<RawDatum> {...props} isInteractive={isInteractive} forwardedRef={ref} />\n        </Container>\n    )\n) as <RawDatum extends BarDatum>(\n    props: WithChartRef<BarCanvasProps<RawDatum>, HTMLCanvasElement>\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { Bar } from './Bar'\nimport { BarDatum, ResponsiveBarSvgProps } from './types'\n\nexport const ResponsiveBar = forwardRef(\n    <D extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: Omit<ResponsiveBarSvgProps<D>, 'ref'>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => <Bar<D> {...props} width={width} height={height} ref={ref} />}\n        </ResponsiveWrapper>\n    )\n) as <D extends BarDatum>(props: ResponsiveBarSvgProps<D>) => ReactElement\n","import { ForwardedRef, forwardRef, ReactElement } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { BarDatum, ResponsiveBarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\n\nexport const ResponsiveBarCanvas = forwardRef(\n    <D extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: Omit<ResponsiveBarCanvasProps<D>, 'ref'>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <BarCanvas<D> {...props} width={width} height={height} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <D extends BarDatum>(props: ResponsiveBarCanvasProps<D>) => ReactElement\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","textAnchor","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaDisabled","ariaHidden","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","id","index","Text","dominantBaseline","fillOpacity","labels","text","pointerEvents","BarTooltip","BasicTooltip","formattedValue","enableChip","commonDefaultProps","indexBy","keys","groupMode","layout","valueScale","type","nice","round","indexScale","padding","innerPadding","enableGridX","enableGridY","enableLabel","labelPosition","labelOffset","labelSkipWidth","labelSkipHeight","labelTextColor","colorBy","colors","scheme","from","tooltipLabel","datum","indexValue","initialHiddenIds","enableTotals","totalsOffset","svgDefaultProps","layers","axisTop","axisRight","axisBottom","axisLeft","barComponent","defs","markers","animate","animateOnMount","motionConfig","role","canvasDefaultProps","renderBar","ctx","labelStyle","fillStyle","strokeStyle","lineWidth","beginPath","roundedRect","min","textBaseline","textAlign","drawCanvasText","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","useComputeLabelLayout","reverse","computedLabelOffset","gt","other","lt","range","start","end","Array","repeat","_","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_valueScale$reverse","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","updateTotalsByIndex","totalsByIndex","currentIndexValue","get","set","updateTotalsPositivesByIndex","totalsPositivesByIndex","updateGreatestValueByIndex","greatestValueByIndex","currentGreatestValue","updateNumberOfBarsByIndex","numberOfBarsByIndex","currentNumberOfBars","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_ref$totalsOffset","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","barTotals","totals","Map","_bar$data","totalsPositive","xPosition","yPosition","animationOffset","indexTotal","_bar$data2","greatestValue","numberOfBars","computeBarTotals","BarTotals","springConfig","useTransition","barTotal","enter","update","leave","config","immediate","initial","totalsTransition","fontWeight","fontSize","fontFamily","alignmentBaseline","InnerBar","partialMargin","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$labelPosition","_ref$labelOffset","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","barAriaHidden","barAriaDisabled","_ref$enableTotals","forwardedRef","_useMotionConfig","useMotionConfig","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","computeLabelLayout","transition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","ref","layer","_layerById$layer","Bar","forwardRef","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","_ref$pixelRatio","canvasEl","useRef","useComputedAnnotations","useEffect","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","setCanvasFont","renderLegendToCanvas","renderAnnotationsToCanvas","renderTotalsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","mergeRefs","cursor","BarCanvas","ResponsiveBar","defaultWidth","defaultHeight","onResize","debounceResize","ResponsiveWrapper","ResponsiveBarCanvas"],"mappings":"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"}