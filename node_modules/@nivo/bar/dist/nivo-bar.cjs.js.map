{"version":3,"file":"nivo-bar.cjs.js","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/defaults.ts","../src/renderBar.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/compute/totals.ts","../src/hooks.ts","../src/BarTotals.tsx","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps, BarDatum } from './types'\n\nexport const BarAnnotations = <D extends BarDatum>({\n    bars,\n    annotations,\n}: BarAnnotationsProps<D>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Text } from '@nivo/text'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <D extends BarDatum>({\n    bar: { data, ...bar },\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n    borderRadius,\n    borderWidth,\n    label,\n    shouldRenderLabel,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    tooltip,\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<D>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n                data-testid={`bar.item.${data.id}.${data.index}`}\n            />\n            {shouldRenderLabel && (\n                <Text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        // We don't want the label to intercept mouse events\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </Text>\n            )}\n        </animated.g>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarTooltipProps } from './types'\n\nexport const BarTooltip = <D extends BarDatum>({ color, label, ...data }: BarTooltipProps<D>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport {\n    BarCommonProps,\n    BarDatum,\n    ComputedDatum,\n    BarSvgPropsWithDefaults,\n    BarCanvasPropsWithDefaults,\n} from './types'\nimport { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { renderBar } from './renderBar'\n\nexport const commonDefaultProps: Omit<BarCommonProps<BarDatum>, 'data' | 'theme'> = {\n    indexBy: 'id',\n    keys: ['value'],\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    valueScale: { type: 'linear', nice: true, round: false },\n    indexScale: { type: 'band', round: false },\n    padding: 0.1,\n    innerPadding: 0,\n    enableGridX: false,\n    enableGridY: true,\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { theme: 'labels.text.fill' },\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: (datum: ComputedDatum<BarDatum>) => `${datum.id} - ${datum.indexValue}`,\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps: Omit<\n    BarSvgPropsWithDefaults<BarDatum>,\n    'data' | 'width' | 'height' | 'theme'\n> = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'],\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    barComponent: BarItem,\n    defs: [],\n    fill: [],\n    markers: [],\n    animate: true,\n    animateOnMount: false,\n    motionConfig: 'default',\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps: Omit<\n    BarCanvasPropsWithDefaults<BarDatum>,\n    'data' | 'width' | 'height' | 'theme'\n> = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'],\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    renderBar,\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n}\n","import { roundedRect } from '@nivo/canvas'\nimport { drawCanvasText } from '@nivo/text'\nimport { BarDatum, RenderBarProps } from './types'\n\nexport const renderBar = <D extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        bar: { color, height, width, x, y },\n        borderColor,\n        borderRadius,\n        borderWidth,\n        label,\n        shouldRenderLabel,\n        labelStyle,\n        labelX,\n        labelY,\n        textAnchor,\n    }: RenderBarProps<D>\n) => {\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    roundedRect(ctx, x, y, width, height, Math.min(borderRadius, height))\n    ctx.fill()\n\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (shouldRenderLabel) {\n        ctx.textBaseline = 'middle'\n        ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n        drawCanvasText(ctx, labelStyle, label, x + labelX, y + labelY)\n    }\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { commonDefaultProps } from '../defaults'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <D extends BarDatum>(\n    data: readonly D[],\n    getIndex: (datum: D) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <D extends BarDatum>(data: readonly D[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            }) as D\n    )\n\nexport const filterNullValues = <D extends BarDatum>(data: D) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<D, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<D extends BarDatum>(\n    layout: BarCommonProps<D>['layout'] = commonDefaultProps.layout,\n    reverse: boolean,\n    labelPosition: BarCommonProps<D>['labelPosition'] = commonDefaultProps.labelPosition,\n    labelOffset: BarCommonProps<D>['labelOffset'] = commonDefaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<D extends BarDatum, XScaleInput, YScaleInput> = {\n    data: readonly D[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <D extends BarDatum>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<D>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? (yScale(d) ?? 0) : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<D>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<D> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <D extends BarDatum>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<D>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : (xScale(d) ?? 0))\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<D>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<D> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <D extends BarDatum>({\n    layout,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<D>>,\n    | 'data'\n    | 'height'\n    | 'valueScale'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'padding'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const clampMin = valueScale.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        valueScale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    // As we use extra inner padding between the bars, we need to adjust the bandwidth.\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<D, any, any>,\n        bandwidth,\n        valueScale.reverse ?? false,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<D>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<D extends BarDatum> = SeriesPoint<D>\n\ntype Params<D extends BarDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<D>>\n    getIndex: (datum: D) => string\n    getTooltipLabel: (datum: ComputedDatum<D>) => string\n    innerPadding: number\n    stackedData: Series<D, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <D extends BarDatum>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<D>[] => {\n    const getY = (d: StackDatum<D>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<D>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<D>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<D> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <D extends BarDatum>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<D, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<D>[] => {\n    const getX = (d: StackDatum<D>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<D>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<D>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<D> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'valueScale'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'padding'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        valueScale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        valueScale.reverse ?? false,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n    reverse: boolean\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { commonDefaultProps } from '../defaults'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <D extends BarDatum>(\n    bars: ComputedBarDatum<D>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<D>['layout'] = commonDefaultProps.layout,\n    groupMode: BarCommonProps<D>['groupMode'] = commonDefaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useValueFormatter, Margin } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <D extends BarDatum>({\n    indexBy = commonDefaultProps.indexBy,\n    keys = commonDefaultProps.keys,\n    label = commonDefaultProps.label,\n    tooltipLabel = commonDefaultProps.tooltipLabel,\n    valueFormat,\n    colors = commonDefaultProps.colors,\n    colorBy = commonDefaultProps.colorBy,\n    borderColor = commonDefaultProps.borderColor,\n    labelTextColor = commonDefaultProps.labelTextColor,\n    groupMode = commonDefaultProps.groupMode,\n    layout = commonDefaultProps.layout,\n    data,\n    margin,\n    width,\n    height,\n    padding = commonDefaultProps.padding,\n    innerPadding = commonDefaultProps.innerPadding,\n    valueScale = commonDefaultProps.valueScale,\n    indexScale = commonDefaultProps.indexScale,\n    initialHiddenIds = commonDefaultProps.initialHiddenIds,\n    enableLabel = commonDefaultProps.enableLabel,\n    labelSkipWidth = commonDefaultProps.labelSkipWidth,\n    labelSkipHeight = commonDefaultProps.labelSkipHeight,\n    legends = commonDefaultProps.legends,\n    legendLabel,\n    totalsOffset = commonDefaultProps.totalsOffset,\n}: Partial<\n    Pick<\n        BarCommonProps<D>,\n        | 'indexBy'\n        | 'keys'\n        | 'label'\n        | 'tooltipLabel'\n        | 'valueFormat'\n        | 'colors'\n        | 'colorBy'\n        | 'borderColor'\n        | 'labelTextColor'\n        | 'groupMode'\n        | 'layout'\n        | 'padding'\n        | 'innerPadding'\n        | 'valueScale'\n        | 'indexScale'\n        | 'initialHiddenIds'\n        | 'enableLabel'\n        | 'labelSkipWidth'\n        | 'labelSkipHeight'\n        | 'legends'\n        | 'legendLabel'\n        | 'totalsOffset'\n    >\n> & {\n    width: number\n    height: number\n    margin: Margin\n    data: DataProps<D>['data']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<D>>(borderColor, theme)\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<D>>(labelTextColor, theme)\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        data,\n        getIndex,\n        keys,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter((bar): bar is ComputedBarDatumWithValue<D> => bar.data.value !== null)\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const reverse = valueScale.reverse ?? false\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n","import { useTheme } from '@nivo/theming'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n    WithChartRef,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport {\n    BarComponent,\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayerId,\n    BarSvgProps,\n    BarTooltipComponent,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<D extends BarDatum> = Omit<\n    BarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <D extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    layers = svgDefaultProps.layers as BarLayerId[],\n    barComponent = svgDefaultProps.barComponent as unknown as BarComponent<D>,\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n    markers = svgDefaultProps.markers,\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    annotations = svgDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip as BarTooltipComponent<D>,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n    initialHiddenIds,\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n    forwardedRef,\n}: InnerBarProps<D> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<D>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        data,\n        keys,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(\n        layout,\n        valueScale?.reverse ?? false,\n        labelPosition,\n        labelOffset\n    )\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<D>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<D>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<D> = {\n        ...commonProps,\n        margin,\n        width,\n        height,\n        innerWidth,\n        innerHeight,\n        bars,\n        legendData: legendsWithData,\n        enableLabel,\n        xScale,\n        yScale,\n        tooltip,\n        getTooltipLabel,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        getColor,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = forwardRef(\n    <D extends BarDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...props\n        }: BarSvgProps<D>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerBar<D> {...props} isInteractive={isInteractive} forwardedRef={ref} />\n        </Container>\n    )\n) as <D extends BarDatum>(props: WithChartRef<BarSvgProps<D>, SVGSVGElement>) => ReactElement\n","import {\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    ReactElement,\n    Ref,\n} from 'react'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useValueFormatter,\n    WithChartRef,\n    mergeRefs,\n} from '@nivo/core'\nimport { Theme, useTheme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCanvasRenderer,\n    BarCommonProps,\n    BarDatum,\n    BarTooltipComponent,\n    ComputedBarDatum,\n} from './types'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\nconst findBarUnderCursor = <D extends BarDatum>(\n    nodes: ComputedBarDatum<D>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<D extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: Theme,\n    layout: BarCommonProps<D>['layout'] = canvasDefaultProps.layout\n) {\n    setCanvasFont(ctx, theme.labels.text)\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        drawCanvasText(ctx, theme.labels.text, barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<HTMLCanvasElement>\n}\n\nconst InnerBarCanvas = <D extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n    layers = canvasDefaultProps.layers as BarCanvasLayer<D>[],\n    renderBar = canvasDefaultProps.renderBar as unknown as BarCanvasRenderer<D>,\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n    annotations = canvasDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip as BarTooltipComponent<D>,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    forwardedRef,\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<D>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<D>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        data,\n        keys,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<D> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(\n        layout,\n        valueScale?.reverse ?? false,\n        labelPosition,\n        labelOffset\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                setCanvasFont(ctx, theme.text)\n\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        labelStyle: {\n                            ...theme.labels.text,\n                            fill: getLabelColor(bar) as string,\n                        },\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={mergeRefs(canvasEl, forwardedRef)}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <Container\n            isInteractive={isInteractive}\n            renderWrapper={renderWrapper}\n            theme={theme}\n            animate={false}\n        >\n            <InnerBarCanvas<RawDatum> {...props} isInteractive={isInteractive} forwardedRef={ref} />\n        </Container>\n    )\n) as <RawDatum extends BarDatum>(\n    props: WithChartRef<BarCanvasProps<RawDatum>, HTMLCanvasElement>\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { Bar } from './Bar'\nimport { BarDatum, ResponsiveBarSvgProps } from './types'\n\nexport const ResponsiveBar = forwardRef(\n    <D extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: Omit<ResponsiveBarSvgProps<D>, 'ref'>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => <Bar<D> {...props} width={width} height={height} ref={ref} />}\n        </ResponsiveWrapper>\n    )\n) as <D extends BarDatum>(props: ResponsiveBarSvgProps<D>) => ReactElement\n","import { ForwardedRef, forwardRef, ReactElement } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { BarDatum, ResponsiveBarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\n\nexport const ResponsiveBarCanvas = forwardRef(\n    <D extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: Omit<ResponsiveBarCanvasProps<D>, 'ref'>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <BarCanvas<D> {...props} width={width} height={height} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <D extends BarDatum>(props: ResponsiveBarCanvasProps<D>) => ReactElement\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","jsx","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","textAnchor","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaDisabled","ariaHidden","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","id","index","Text","dominantBaseline","fillOpacity","labels","text","pointerEvents","BarTooltip","BasicTooltip","formattedValue","enableChip","commonDefaultProps","indexBy","keys","groupMode","layout","valueScale","type","nice","round","indexScale","padding","innerPadding","enableGridX","enableGridY","enableLabel","labelPosition","labelOffset","labelSkipWidth","labelSkipHeight","labelTextColor","colorBy","colors","scheme","from","tooltipLabel","datum","indexValue","initialHiddenIds","enableTotals","totalsOffset","svgDefaultProps","layers","axisTop","axisRight","axisBottom","axisLeft","barComponent","defs","markers","animate","animateOnMount","motionConfig","role","canvasDefaultProps","renderBar","ctx","labelStyle","fillStyle","strokeStyle","lineWidth","beginPath","roundedRect","min","textBaseline","textAlign","drawCanvasText","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","useComputeLabelLayout","reverse","computedLabelOffset","gt","other","lt","range","start","end","Array","repeat","_","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_valueScale$reverse","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","updateTotalsByIndex","totalsByIndex","currentIndexValue","get","set","updateTotalsPositivesByIndex","totalsPositivesByIndex","updateGreatestValueByIndex","greatestValueByIndex","currentGreatestValue","updateNumberOfBarsByIndex","numberOfBarsByIndex","currentNumberOfBars","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_ref$totalsOffset","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","barTotals","totals","Map","_bar$data","totalsPositive","xPosition","yPosition","animationOffset","indexTotal","_bar$data2","greatestValue","numberOfBars","computeBarTotals","BarTotals","springConfig","useTransition","barTotal","enter","update","leave","config","immediate","initial","totalsTransition","fontWeight","fontSize","fontFamily","alignmentBaseline","InnerBar","partialMargin","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$labelPosition","_ref$labelOffset","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","barAriaHidden","barAriaDisabled","_ref$enableTotals","forwardedRef","_useMotionConfig","useMotionConfig","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","computeLabelLayout","transition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","ref","layer","_layerById$layer","Bar","forwardRef","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","_ref$pixelRatio","canvasEl","useRef","useComputedAnnotations","useEffect","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","setCanvasFont","renderLegendToCanvas","renderAnnotationsToCanvas","renderTotalsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","mergeRefs","cursor","BarCanvas","ResponsiveBar","defaultWidth","defaultHeight","onResize","debounceResize","ResponsiveWrapper","ResponsiveBarCanvas"],"mappings":"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"}