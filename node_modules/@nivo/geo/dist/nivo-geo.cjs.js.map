{"version":3,"file":"nivo-geo.cjs.js","sources":["../src/GeoGraticule.js","../src/GeoMapFeature.js","../src/hooks.js","../src/GeoMap.js","../src/GeoMapCanvas.js","../src/ChoroplethTooltip.js","../src/Choropleth.js","../src/ChoroplethCanvas.js","../src/props.js","../src/ResponsiveChoropleth.js","../src/ResponsiveChoroplethCanvas.js","../src/ResponsiveGeoMap.js","../src/ResponsiveGeoMapCanvas.js"],"sourcesContent":["import { memo } from 'react'\n\n/**\n * GeoGraticule.propTypes = {\n *     path: PropTypes.func.isRequired,\n *     graticule: PropTypes.func.isRequired,\n *     lineWidth: PropTypes.number.isRequired,\n *     lineColor: PropTypes.string.isRequired,\n * }\n */\nconst GeoGraticule = memo(({ path, graticule, lineWidth, lineColor }) => {\n    return <path fill=\"none\" strokeWidth={lineWidth} stroke={lineColor} d={path(graticule())} />\n})\n\nexport default GeoGraticule\n","import { memo } from 'react'\n\n/**\n * GeoMapFeature.propTypes = {\n *     feature: PropTypes.shape({\n *         id: PropTypes.string.isRequired,\n *         type: PropTypes.oneOf(['Feature']).isRequired,\n *         properties: PropTypes.object,\n *         geometry: PropTypes.object.isRequired,\n *     }).isRequired,\n *     path: PropTypes.func.isRequired,\n *\n *     fillColor: PropTypes.string.isRequired,\n *     borderWidth: PropTypes.number.isRequired,\n *     borderColor: PropTypes.string.isRequired,\n *\n *     onMouseEnter: PropTypes.func.isRequired,\n *     onMouseMove: PropTypes.func.isRequired,\n *     onMouseLeave: PropTypes.func.isRequired,\n *     onClick: PropTypes.func.isRequired,\n * }\n */\nconst GeoMapFeature = memo(\n    ({\n        feature,\n        path,\n        fillColor,\n        borderWidth,\n        borderColor,\n        onClick,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n    }) => {\n        return (\n            <path\n                key={feature.id}\n                fill={feature?.fill ?? fillColor}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                strokeLinejoin=\"bevel\"\n                d={path(feature)}\n                onMouseEnter={event => onMouseEnter(feature, event)}\n                onMouseMove={event => onMouseMove(feature, event)}\n                onMouseLeave={event => onMouseLeave(feature, event)}\n                onClick={event => onClick(feature, event)}\n            />\n        )\n    }\n)\n\nexport default GeoMapFeature\n","import { useMemo } from 'react'\nimport isFunction from 'lodash/isFunction.js'\nimport get from 'lodash/get.js'\nimport { format } from 'd3-format'\nimport {\n    geoPath,\n    geoAzimuthalEqualArea,\n    geoAzimuthalEquidistant,\n    geoGnomonic,\n    geoOrthographic,\n    geoStereographic,\n    geoEqualEarth,\n    geoEquirectangular,\n    geoMercator,\n    geoTransverseMercator,\n    geoNaturalEarth1,\n    geoGraticule,\n} from 'd3-geo'\nimport { guessQuantizeColorScale } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useQuantizeColorScaleLegendData } from '@nivo/legends'\n\nexport const projectionById = {\n    azimuthalEqualArea: geoAzimuthalEqualArea,\n    azimuthalEquidistant: geoAzimuthalEquidistant,\n    gnomonic: geoGnomonic,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    mercator: geoMercator,\n    transverseMercator: geoTransverseMercator,\n    naturalEarth1: geoNaturalEarth1,\n}\n\nexport const useGeoMap = ({\n    width,\n    height,\n    projectionType,\n    projectionScale,\n    projectionTranslation,\n    projectionRotation,\n    fillColor,\n    borderWidth,\n    borderColor,\n}) => {\n    const [translateX, translateY] = projectionTranslation\n    const [rotateLambda, rotatePhi, rotateGamma] = projectionRotation\n\n    const projection = useMemo(() => {\n        return projectionById[projectionType]()\n            .scale(projectionScale)\n            .translate([width * translateX, height * translateY])\n            .rotate([rotateLambda, rotatePhi, rotateGamma])\n    }, [\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        translateX,\n        translateY,\n        rotateLambda,\n        rotatePhi,\n        rotateGamma,\n    ])\n    const path = useMemo(() => geoPath(projection), [projection])\n    const graticule = useMemo(() => geoGraticule(), [])\n\n    const theme = useTheme()\n    const getBorderWidth = useMemo(\n        () => (typeof borderWidth === 'function' ? borderWidth : () => borderWidth),\n        [borderWidth]\n    )\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getFillColor = useMemo(\n        () => (typeof fillColor === 'function' ? fillColor : () => fillColor),\n        [fillColor]\n    )\n\n    return {\n        projection,\n        path,\n        graticule,\n        getBorderWidth,\n        getBorderColor,\n        getFillColor,\n    }\n}\n\nexport const useChoropleth = ({\n    features,\n    data,\n    match,\n    label,\n    value,\n    valueFormat,\n    colors,\n    unknownColor,\n    domain,\n}) => {\n    const findMatchingDatum = useMemo(() => {\n        if (isFunction(match)) return match\n        return (feature, datum) => {\n            const featureKey = get(feature, match)\n            const datumKey = get(datum, match)\n\n            return featureKey && featureKey === datumKey\n        }\n    }, [match])\n    const getLabel = useMemo(\n        () => (isFunction(label) ? label : datum => get(datum, label)),\n        [label]\n    )\n    const getValue = useMemo(\n        () => (isFunction(value) ? value : datum => get(datum, value)),\n        [value]\n    )\n    const valueFormatter = useMemo(() => {\n        if (valueFormat === undefined) return d => d\n        if (isFunction(valueFormat)) return valueFormat\n        return format(valueFormat)\n    }, [valueFormat])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain(domain),\n        [colors, domain]\n    )\n    const getFillColor = useMemo(() => {\n        return feature => {\n            if (feature.value === undefined) return unknownColor\n            return colorScale(feature.value)\n        }\n    }, [colorScale, unknownColor])\n\n    const boundFeatures = useMemo(\n        () =>\n            features.map(feature => {\n                const datum = data.find(datum => findMatchingDatum(feature, datum))\n                const datumValue = getValue(datum)\n\n                if (datum) {\n                    const featureWithData = {\n                        ...feature,\n                        data: datum,\n                        value: datumValue,\n                        formattedValue: valueFormatter(datumValue),\n                    }\n                    featureWithData.color = getFillColor(featureWithData)\n                    featureWithData.label = getLabel(featureWithData)\n\n                    return featureWithData\n                }\n\n                return feature\n            }),\n        [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor, getLabel]\n    )\n\n    const legendData = useQuantizeColorScaleLegendData({\n        scale: colorScale,\n        valueFormat: valueFormatter,\n    })\n\n    return {\n        colorScale,\n        getFillColor,\n        boundFeatures,\n        valueFormatter,\n        legendData,\n    }\n}\n","import { Fragment, useCallback, memo } from 'react'\nimport { SvgWrapper, withContainer, useDimensions } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap } from './hooks'\n\nconst GeoMap = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        layers = ['graticule', 'features'],\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        isInteractive = true,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onClick = () => {},\n        tooltip: Tooltip,\n        role = 'img',\n    } = props\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n    })\n\n    const theme = useTheme()\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {features.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n\n                return <Fragment key={i}>{layer(props)}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nexport default withContainer(GeoMap)\n","import { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useGeoMap } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst GeoMapCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        layers,\n\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n\n        isInteractive = true,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onClick = () => {},\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onMouseMove = () => {},\n        tooltip: Tooltip,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap(\n        {\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor,\n            borderWidth,\n            borderColor,\n        }\n    )\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                features.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else {\n                layer(ctx, props)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        features,\n        layers,\n        enableGraticule,\n        graticuleLineColor,\n        graticuleLineWidth,\n        props,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove?.(feature || null, event)\n        },\n        [\n            showTooltipFromEvent,\n            hideTooltip,\n            isInteractive,\n            Tooltip,\n            canvasEl,\n            features,\n            projection,\n            onMouseMove,\n        ]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, features, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nexport default withContainer(GeoMapCanvas)\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChoroplethTooltip = memo(({ feature }) => {\n    if (feature.data === undefined) return null\n\n    return (\n        <BasicTooltip\n            id={feature.label}\n            color={feature.color}\n            enableChip={true}\n            value={feature.formattedValue}\n        />\n    )\n})\n\nexport default ChoroplethTooltip\n","import { memo, Fragment, useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, bindDefs } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst Choropleth = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onClick = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n        role = 'img',\n        defs = [],\n        fill = [],\n    } = props\n\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    const theme = useTheme()\n\n    const boundDefs = bindDefs(defs, boundFeatures, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {boundFeatures.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n                if (layer === 'legends') {\n                    return legends.map((legend, i) => {\n                        return (\n                            <BoxLegendSvg\n                                key={i}\n                                containerWidth={width}\n                                containerHeight={height}\n                                data={legendData}\n                                {...legend}\n                            />\n                        )\n                    })\n                }\n\n                return <Fragment key={i}>{layer({})}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nexport default withContainer(Choropleth)\n","import { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst ChoroplethCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onClick = () => {},\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onMouseMove = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n    } = props\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                boundFeatures.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: width,\n                        containerHeight: height,\n                        theme,\n                    })\n                })\n            } else {\n                // layer(ctx, {})\n            }\n        })\n    }, [\n        canvasEl,\n        width,\n        outerWidth,\n        height,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        boundFeatures,\n        legends,\n        legendData,\n        layers,\n        enableGraticule,\n        graticuleLineColor,\n        graticuleLineWidth,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove?.(feature || null, event)\n        },\n        [\n            showTooltipFromEvent,\n            hideTooltip,\n            isInteractive,\n            Tooltip,\n            canvasEl,\n            boundFeatures,\n            projection,\n            onMouseMove,\n        ]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, boundFeatures, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nexport default withContainer(ChoroplethCanvas)\n","import ChoroplethTooltip from './ChoroplethTooltip'\n\nconst commonDefaultProps = {\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: false,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#999999',\n\n    fillColor: '#dddddd',\n    borderWidth: 0,\n    borderColor: '#000000',\n\n    isInteractive: true,\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    onMouseEnter: () => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    onMouseLeave: () => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    onMouseMove: () => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    onClick: () => {},\n\n    layers: ['graticule', 'features'],\n    legends: [],\n\n    fill: [],\n    defs: [],\n}\n\nexport const GeoMapDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n\nexport const GeoMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nconst commonChoroplethDefaultProps = {\n    match: 'id',\n    label: 'id',\n    value: 'value',\n    colors: 'PuBuGn',\n    unknownColor: '#999',\n    tooltip: ChoroplethTooltip,\n    layers: ['graticule', 'features', 'legends'],\n}\n\nexport const ChoroplethDefaultProps = {\n    ...GeoMapDefaultProps,\n    ...commonChoroplethDefaultProps,\n    role: 'img',\n}\n\nexport const ChoroplethCanvasDefaultProps = {\n    ...GeoMapCanvasDefaultProps,\n    ...commonChoroplethDefaultProps,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Choropleth from './Choropleth'\n\nconst ResponsiveChoropleth = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Choropleth width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoropleth\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ChoroplethCanvas from './ChoroplethCanvas'\n\nconst ResponsiveChoroplethCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChoroplethCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoroplethCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMap from './GeoMap'\n\nconst ResponsiveGeoMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMapCanvas from './GeoMapCanvas'\n\nconst ResponsiveGeoMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMapCanvas\n"],"names":["GeoGraticule","memo","_ref","path","graticule","lineWidth","lineColor","_jsx","fill","strokeWidth","stroke","d","GeoMapFeature","_feature$fill","feature","fillColor","borderWidth","borderColor","onClick","onMouseEnter","onMouseMove","onMouseLeave","strokeLinejoin","event","id","projectionById","azimuthalEqualArea","geoAzimuthalEqualArea","azimuthalEquidistant","geoAzimuthalEquidistant","gnomonic","geoGnomonic","orthographic","geoOrthographic","stereographic","geoStereographic","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","mercator","geoMercator","transverseMercator","geoTransverseMercator","naturalEarth1","geoNaturalEarth1","useGeoMap","width","height","projectionType","projectionScale","projectionTranslation","projectionRotation","translateX","translateY","rotateLambda","rotatePhi","rotateGamma","projection","useMemo","scale","translate","rotate","geoPath","geoGraticule","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","getFillColor","useChoropleth","_ref2","features","data","match","label","value","valueFormat","colors","unknownColor","domain","findMatchingDatum","isFunction","datum","featureKey","get","datumKey","getLabel","getValue","valueFormatter","undefined","format","colorScale","guessQuantizeColorScale","boundFeatures","map","find","datumValue","featureWithData","_extends","formattedValue","color","legendData","useQuantizeColorScaleLegendData","GeoMap","props","partialMargin","margin","_props$layers","layers","_props$projectionType","_props$projectionScal","_props$projectionTran","_props$projectionRota","_props$fillColor","_props$borderWidth","_props$borderColor","_props$enableGraticul","enableGraticule","_props$graticuleLineW","graticuleLineWidth","_props$graticuleLineC","graticuleLineColor","_props$isInteractive","isInteractive","_props$onClick","Tooltip","tooltip","_props$role","role","_useDimensions","useDimensions","outerWidth","outerHeight","_useGeoMap","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","SvgWrapper","children","layer","i","Fragment","withContainer","getFeatureFromMouseEvent","el","_getRelativeCursor","getRelativeCursor","x","y","f","geoContains","invert","GeoMapCanvas","_props$pixelRatio","pixelRatio","window","devicePixelRatio","_props$onMouseMove","canvasEl","useRef","useEffect","current","ctx","getContext","fillStyle","background","fillRect","left","top","context","forEach","strokeStyle","beginPath","jsx","ref","style","cursor","ChoroplethTooltip","BasicTooltip","enableChip","Choropleth","_props$match","_props$label","_props$value","_props$colors","_props$unknownColor","_props$legends","legends","_props$tooltip","_props$defs","defs","_props$fill","_useChoropleth","boundDefs","bindDefs","dataKey","targetKey","legend","BoxLegendSvg","containerWidth","containerHeight","ChoroplethCanvas","renderLegendToCanvas","commonDefaultProps","GeoMapDefaultProps","GeoMapCanvasDefaultProps","commonChoroplethDefaultProps","ChoroplethDefaultProps","ChoroplethCanvasDefaultProps","ResponsiveWrapper"],"mappings":"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"}