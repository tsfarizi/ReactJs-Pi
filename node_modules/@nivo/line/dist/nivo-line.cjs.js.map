{"version":3,"file":"nivo-line.cjs.js","sources":["../src/PointTooltip.tsx","../src/defaults.ts","../src/SliceTooltip.tsx","../src/hooks.ts","../src/Areas.tsx","../src/LinesItem.tsx","../src/Lines.tsx","../src/SlicesItem.tsx","../src/Slices.tsx","../src/Points.tsx","../src/Mesh.tsx","../src/Line.tsx","../src/ResponsiveLine.tsx","../src/LineCanvas.tsx","../src/ResponsiveLineCanvas.tsx","../src/types.ts"],"sourcesContent":["import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { LineSeries, PointTooltipProps } from './types'\n\nexport const NonMemoizedPointTooltip = <Series extends LineSeries>({\n    point,\n}: PointTooltipProps<Series>) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.seriesColor}\n        />\n    )\n}\n\nexport const PointTooltip = memo(NonMemoizedPointTooltip)\n","import { defaultAxisProps } from '@nivo/axes'\nimport {\n    CommonLineProps,\n    LineSvgPropsWithDefaults,\n    LineCanvasPropsWithDefaults,\n    DefaultSeries,\n    LineLayerId,\n} from './types'\nimport { PointTooltip } from './PointTooltip'\nimport { SliceTooltip } from './SliceTooltip'\n\nexport const commonDefaultProps: Omit<\n    CommonLineProps<DefaultSeries>,\n    | 'data'\n    | 'xFormat'\n    | 'yFormat'\n    | 'layers'\n    | 'width'\n    | 'height'\n    | 'margin'\n    | 'theme'\n    | 'pointSymbol'\n    | 'gridXValues'\n    | 'gridYValues'\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onMouseDown'\n    | 'onMouseUp'\n    | 'onClick'\n    | 'onDoubleClick'\n    | 'onTouchStart'\n    | 'onTouchMove'\n    | 'onTouchEnd'\n> & {\n    layers: LineLayerId[]\n} = {\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n    curve: 'linear',\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'series.color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    enableGridX: true,\n    enableGridY: true,\n    legends: [],\n    isInteractive: true,\n    tooltip: PointTooltip,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    renderWrapper: true,\n}\n\nexport const svgDefaultProps: Omit<\n    LineSvgPropsWithDefaults<DefaultSeries>,\n    'data' | 'width' | 'height' | 'margin' | 'theme'\n> = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    enablePointLabel: false,\n    pointLabel: 'data.yFormatted',\n    areaBlendMode: 'normal',\n    axisTop: null,\n    axisRight: null,\n    axisBottom: defaultAxisProps,\n    axisLeft: defaultAxisProps,\n    useMesh: false,\n    enableSlices: false,\n    debugSlices: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n    enableTouchCrosshair: false,\n    initialHiddenIds: [],\n    animate: true,\n    motionConfig: 'gentle',\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps: Omit<\n    LineCanvasPropsWithDefaults<DefaultSeries>,\n    'data' | 'width' | 'height' | 'margin' | 'theme'\n> = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n    axisTop: null,\n    axisRight: null,\n    axisBottom: defaultAxisProps,\n    axisLeft: defaultAxisProps,\n}\n","import { memo } from 'react'\nimport { useTheme } from '@nivo/theming'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\nimport { LineSeries, SliceTooltipProps } from './types'\n\nexport const NonMemoizedSliceTooltip = <Series extends LineSeries>({\n    slice,\n    axis,\n}: SliceTooltipProps<Series>) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.seriesColor} style={theme.tooltip.chip} />,\n                point.seriesId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nexport const SliceTooltip = memo(NonMemoizedSliceTooltip)\n","import { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport uniqueId from 'lodash/uniqueId.js'\nimport { curveFromProp, useValueFormatter } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    useOrdinalColorScale,\n    useInheritedColor,\n    OrdinalColorScaleConfig,\n    InheritedColorConfig,\n} from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { commonDefaultProps, svgDefaultProps } from './defaults'\nimport {\n    LineSeries,\n    CommonLineProps,\n    DataProps,\n    InferX,\n    InferY,\n    InferSeriesId,\n    LineSvgProps,\n    LineGenerator,\n    AreaGenerator,\n    AllowedValue,\n    ComputedSeries,\n    Point,\n    SliceData,\n    PointColorContext,\n} from './types'\n\nexport function useLineGenerator(curve: CommonLineProps<LineSeries>['curve']): LineGenerator {\n    return useMemo(() => {\n        return line<{\n            x: number\n            y: number\n        }>()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y(d => d.y)\n            .curve(curveFromProp(curve))\n    }, [curve])\n}\n\nexport function useAreaGenerator<Y extends AllowedValue>({\n    curve,\n    yScale,\n    areaBaselineValue,\n}: {\n    curve: CommonLineProps<LineSeries>['curve']\n    yScale: (y: Y) => number\n    areaBaselineValue: Y\n}): AreaGenerator {\n    return useMemo(() => {\n        return area<{\n            x: number\n            y: number\n        }>()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nfunction usePoints<Series extends LineSeries>({\n    series,\n    getPointColor,\n    getPointBorderColor,\n    formatX,\n    formatY,\n}: {\n    series: ComputedSeries<Series>[]\n    getPointColor: (context: PointColorContext<Series>) => string\n    getPointBorderColor: (point: Omit<Point<Series>, 'borderColor'>) => string\n    formatX: (x: InferX<Series>) => string\n    formatY: (y: InferY<Series>) => string\n}) {\n    return useMemo(() => {\n        return series.reduce((acc, seriesItem, seriesIndex) => {\n            return [\n                ...acc,\n                ...seriesItem.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, indexInSeries) => {\n                        const point: Omit<Point<Series>, 'color' | 'borderColor'> & {\n                            color?: string\n                            borderColor?: string\n                        } = {\n                            id: `${seriesItem.id}.${indexInSeries}`,\n                            indexInSeries,\n                            absIndex: acc.length + indexInSeries,\n                            seriesIndex,\n                            seriesId: seriesItem.id,\n                            seriesColor: seriesItem.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                            data: {\n                                ...datum.data,\n                                xFormatted: formatX(datum.data.x as InferX<Series>),\n                                yFormatted: formatY(datum.data.y as InferY<Series>),\n                            },\n                        }\n                        point.color = getPointColor({\n                            series: seriesItem,\n                            point: point as Omit<Point<Series>, 'color' | 'borderColor'>,\n                        })\n                        point.borderColor = getPointBorderColor(\n                            point as Omit<Point<Series>, 'borderColor'>\n                        )\n\n                        return point as Point<Series>\n                    }),\n            ]\n        }, [] as Point<Series>[])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = <Series extends LineSeries>({\n    componentId,\n    enableSlices,\n    points,\n    width,\n    height,\n}: {\n    componentId: string\n    enableSlices: Exclude<LineSvgProps<Series>['enableSlices'], undefined>\n    points: Point<Series>[]\n    width: number\n    height: number\n}) => {\n    return useMemo(() => {\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: `slice:${componentId}:${x}`,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    } as SliceData<Series>\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    } as SliceData<Series>\n                })\n        }\n\n        return []\n    }, [componentId, enableSlices, height, points, width])\n}\n\nexport const LINE_UNIQUE_ID_PREFIX = 'line'\n\nexport const useLine = <Series extends LineSeries>({\n    data,\n    xScale: xScaleSpec = commonDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = commonDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = commonDefaultProps.colors as OrdinalColorScaleConfig<Series>,\n    curve = commonDefaultProps.curve,\n    areaBaselineValue = commonDefaultProps.areaBaselineValue as InferY<Series>,\n    pointColor = commonDefaultProps.pointColor as InheritedColorConfig<PointColorContext<Series>>,\n    pointBorderColor = commonDefaultProps.pointBorderColor as InheritedColorConfig<\n        Omit<Point<Series>, 'borderColor'>\n    >,\n    enableSlices = svgDefaultProps.enableSlices as Exclude<\n        LineSvgProps<Series>['enableSlices'],\n        undefined\n    >,\n    initialHiddenIds = svgDefaultProps.initialHiddenIds as InferSeriesId<Series>[],\n}: DataProps<Series> &\n    Pick<\n        CommonLineProps<Series>,\n        | 'xScale'\n        | 'yScale'\n        | 'colors'\n        | 'curve'\n        | 'areaBaselineValue'\n        | 'pointColor'\n        | 'pointBorderColor'\n    > & {\n        xFormat?: CommonLineProps<Series>['xFormat']\n        yFormat?: CommonLineProps<Series>['yFormat']\n    } & Pick<LineSvgProps<Series>, 'enableSlices' | 'initialHiddenIds'> & {\n        width: number\n        height: number\n    }): {\n    legendData: {\n        id: InferSeriesId<Series>\n        label: string\n        color: string\n        hidden: boolean\n    }[]\n    toggleSeries: (id: InferSeriesId<Series>) => void\n    lineGenerator: LineGenerator\n    areaGenerator: AreaGenerator\n    getColor: (series: Series) => string\n    series: ComputedSeries<Series>[]\n    xScale: (x: InferX<Series>) => number\n    yScale: (y: InferY<Series>) => number\n    slices: SliceData<Series>[]\n    points: Point<Series>[]\n} => {\n    const [componentId] = useState(uniqueId(LINE_UNIQUE_ID_PREFIX))\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries<Series, Series['data'][number]>(\n                data.filter(item => hiddenIds.indexOf(item.id as InferSeriesId<Series>) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(seriesItem => ({\n            id: seriesItem.id as InferSeriesId<Series>,\n            label: `${seriesItem.id}`,\n            color: getColor(seriesItem),\n        }))\n\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(seriesItem => seriesItem.id === datum.id)!,\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id)) as unknown as ComputedSeries<Series>[]\n\n        const legendData = dataWithColor\n            .map(item => ({\n                ...item,\n                hidden: !series.find(seriesItem => seriesItem.id === item.id),\n            }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSeries = useCallback((id: InferSeriesId<Series>) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints<Series>({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices<Series>({\n        componentId,\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator(curve)\n    const areaGenerator = useAreaGenerator<InferY<Series>>({\n        curve,\n        yScale: yScale as (y: InferY<Series>) => number,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSeries,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale: xScale as (x: InferX<Series>) => number,\n        yScale: yScale as (y: InferY<Series>) => number,\n        slices,\n        points,\n    }\n}\n","import { memo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { CssMixBlendMode, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { LineSeries, ComputedSeries, AreaGenerator } from './types'\n\nconst AreaPath = ({\n    areaBlendMode,\n    areaOpacity,\n    color,\n    fill,\n    path,\n}: {\n    areaBlendMode: CssMixBlendMode\n    areaOpacity: number\n    color: string\n    fill?: string\n    path: string\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nconst NonMemoizedAreas = <Series extends LineSeries>({\n    areaGenerator,\n    areaOpacity,\n    areaBlendMode,\n    series,\n}: {\n    areaGenerator: AreaGenerator\n    areaOpacity: number\n    areaBlendMode: CssMixBlendMode\n    series: readonly ComputedSeries<Series>[]\n}) => {\n    const reversedSeries = series.slice(0).reverse()\n\n    return (\n        <g>\n            {reversedSeries.map(seriesItem => (\n                <AreaPath\n                    key={`${seriesItem.id}`}\n                    path={areaGenerator(seriesItem.data.map(d => d.position))!}\n                    {...{ areaOpacity, areaBlendMode, ...seriesItem }}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport const Areas = memo(NonMemoizedAreas) as typeof NonMemoizedAreas\n","import { memo, useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\nimport { LineGenerator } from './types'\n\nexport const NonMemoizedLinesItem = ({\n    lineGenerator,\n    points,\n    color,\n    thickness,\n}: {\n    lineGenerator: LineGenerator\n    points: { x: number; y: number }[]\n    color: string\n    thickness: number\n}) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path!)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nexport const LinesItem = memo(NonMemoizedLinesItem) as typeof NonMemoizedLinesItem\n","import { memo } from 'react'\nimport { LineSeries, ComputedSeries, LineGenerator } from './types'\nimport { LinesItem } from './LinesItem'\n\nexport const NonMemoizedLines = <Series extends LineSeries>({\n    series,\n    lineGenerator,\n    lineWidth,\n}: {\n    series: readonly ComputedSeries<Series>[]\n    lineGenerator: LineGenerator\n    lineWidth: number\n}) => {\n    return (\n        <>\n            {series\n                .slice(0)\n                .reverse()\n                .map(({ id, data, color }) => (\n                    <LinesItem\n                        key={id}\n                        points={data.map(d => d.position)}\n                        lineGenerator={lineGenerator}\n                        color={color}\n                        thickness={lineWidth}\n                    />\n                ))}\n        </>\n    )\n}\n\nexport const Lines = memo(NonMemoizedLines) as typeof NonMemoizedLines\n","import { createElement, memo, useCallback, MouseEvent, TouchEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { LineSeries, SliceData, CommonLineProps, LineSvgProps } from './types'\n\nexport const NonMemoizedSlicesItem = <Series extends LineSeries>({\n    slice,\n    slices,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}: {\n    slice: SliceData<Series>\n    slices: readonly SliceData<Series>[]\n    axis: Exclude<LineSvgProps<Series>['enableSlices'], undefined | false>\n    debug: boolean\n    tooltip: CommonLineProps<Series>['sliceTooltip']\n    isCurrent: boolean\n    setCurrent: (slice: SliceData<Series> | null) => void\n    onMouseEnter?: CommonLineProps<Series>['onMouseEnter']\n    onMouseMove?: CommonLineProps<Series>['onMouseMove']\n    onMouseLeave?: CommonLineProps<Series>['onMouseLeave']\n    onMouseDown?: CommonLineProps<Series>['onMouseDown']\n    onMouseUp?: CommonLineProps<Series>['onMouseUp']\n    onClick?: CommonLineProps<Series>['onClick']\n    onDoubleClick?: CommonLineProps<Series>['onDoubleClick']\n    onTouchStart?: CommonLineProps<Series>['onTouchStart']\n    onTouchMove?: CommonLineProps<Series>['onTouchMove']\n    onTouchEnd?: CommonLineProps<Series>['onTouchEnd']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onMouseEnter?.(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, setCurrent, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            onMouseMove?.(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave?.(slice, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave, slice]\n    )\n\n    const handleMouseDown = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseDown?.(slice, event)\n        },\n        [slice, onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseUp?.(slice, event)\n        },\n        [slice, onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(slice, event)\n        },\n        [slice, onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onDoubleClick?.(slice, event)\n        },\n        [slice, onDoubleClick]\n    )\n\n    const handeOnTouchStart = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onTouchStart?.(slice, event)\n        },\n        [axis, onTouchStart, setCurrent, showTooltipFromEvent, slice, tooltip]\n    )\n\n    const handeOnTouchMove = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            // This event will be locked to the element that was touched originally\n            // We find the element that is currently being \"hovered over\" by getting the element at the touch point\n            const touchPoint = event.touches[0]\n            const touchingElement = document.elementFromPoint(\n                touchPoint.clientX,\n                touchPoint.clientY\n            )\n            // Is this a nivo ref?\n            const touchingSliceId = touchingElement?.getAttribute('data-ref')\n            if (touchingSliceId) {\n                // Is this a slice for this graph?\n                const slice = slices.find(slice => slice.id === touchingSliceId)\n                if (slice) {\n                    showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n                    setCurrent(slice)\n                }\n            }\n\n            // Note here, this will pass the original slice, not the one we found\n            // But this can be found with document.elementFromPoint()\n            onTouchMove?.(slice, event)\n        },\n        [axis, onTouchMove, setCurrent, showTooltipFromEvent, slice, slices, tooltip]\n    )\n\n    const handleOnTouchEnd = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd?.(slice, event)\n        },\n        [hideTooltip, setCurrent, onTouchEnd, slice]\n    )\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onClick={handleClick}\n            onDoubleClick={handleDoubleClick}\n            onTouchStart={handeOnTouchStart}\n            onTouchMove={handeOnTouchMove}\n            onTouchEnd={handleOnTouchEnd}\n            data-ref={slice.id}\n        />\n    )\n}\n\nexport const SlicesItem = memo(NonMemoizedSlicesItem) as typeof NonMemoizedSlicesItem\n","import { memo } from 'react'\nimport { SlicesItem } from './SlicesItem'\nimport { LineSeries, SliceData, CommonLineProps, LineSvgProps } from './types'\n\nexport const NonMemoizedSlices = <Series extends LineSeries>({\n    slices,\n    axis,\n    debug,\n    tooltip,\n    current,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}: {\n    slices: readonly SliceData<Series>[]\n    axis: Exclude<LineSvgProps<Series>['enableSlices'], undefined | false>\n    debug: boolean\n    tooltip: CommonLineProps<Series>['sliceTooltip']\n    current: SliceData<Series> | null\n    setCurrent: (slice: SliceData<Series> | null) => void\n    onMouseEnter?: CommonLineProps<Series>['onMouseEnter']\n    onMouseMove?: CommonLineProps<Series>['onMouseMove']\n    onMouseLeave?: CommonLineProps<Series>['onMouseLeave']\n    onMouseDown?: CommonLineProps<Series>['onMouseDown']\n    onMouseUp?: CommonLineProps<Series>['onMouseUp']\n    onClick?: CommonLineProps<Series>['onClick']\n    onDoubleClick?: CommonLineProps<Series>['onDoubleClick']\n    onTouchStart?: CommonLineProps<Series>['onTouchStart']\n    onTouchMove?: CommonLineProps<Series>['onTouchMove']\n    onTouchEnd?: CommonLineProps<Series>['onTouchEnd']\n}) => {\n    return (\n        <>\n            {slices.map(slice => (\n                <SlicesItem<Series>\n                    key={slice.id}\n                    slice={slice}\n                    slices={slices}\n                    axis={axis}\n                    debug={debug}\n                    tooltip={tooltip}\n                    setCurrent={setCurrent}\n                    isCurrent={current !== null && current.id === slice.id}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onMouseDown={onMouseDown}\n                    onMouseUp={onMouseUp}\n                    onClick={onClick}\n                    onDoubleClick={onDoubleClick}\n                    onTouchStart={onTouchStart}\n                    onTouchMove={onTouchMove}\n                    onTouchEnd={onTouchEnd}\n                />\n            ))}\n        </>\n    )\n}\n\nexport const Slices = memo(NonMemoizedSlices) as typeof NonMemoizedSlices\n","import { createElement, memo } from 'react'\n// @ts-expect-error no types\nimport { getLabelGenerator } from '@nivo/core'\nimport { DotsItem, Margin } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { LineSeries, LineSvgPropsWithDefaults, Point } from './types'\n\nconst NonMemoizedPoints = <Series extends LineSeries>({\n    points,\n    symbol,\n    size,\n    borderWidth,\n    enableLabel,\n    label,\n    labelYOffset,\n    isFocusable,\n    setCurrentPoint,\n    tooltip,\n    margin,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaHidden,\n    ariaDisabled,\n}: {\n    points: readonly Point<Series>[]\n    symbol: LineSvgPropsWithDefaults<Series>['pointSymbol']\n    size: number\n    borderWidth: LineSvgPropsWithDefaults<Series>['pointBorderWidth']\n    enableLabel: LineSvgPropsWithDefaults<Series>['enablePointLabel']\n    label: LineSvgPropsWithDefaults<Series>['pointLabel']\n    labelYOffset: LineSvgPropsWithDefaults<Series>['pointLabelYOffset']\n    isFocusable: LineSvgPropsWithDefaults<Series>['isFocusable']\n    setCurrentPoint: (point: Point<Series> | null) => void\n    tooltip: LineSvgPropsWithDefaults<Series>['tooltip']\n    margin: Margin\n    ariaLabel: LineSvgPropsWithDefaults<Series>['pointAriaLabel']\n    ariaLabelledBy: LineSvgPropsWithDefaults<Series>['pointAriaLabelledBy']\n    ariaDescribedBy: LineSvgPropsWithDefaults<Series>['pointAriaDescribedBy']\n    ariaHidden: LineSvgPropsWithDefaults<Series>['pointAriaHidden']\n    ariaDisabled: LineSvgPropsWithDefaults<Series>['pointAriaDisabled']\n}) => {\n    const getLabel = getLabelGenerator(label)\n\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    // We sort the points so that the lower series are drawn on top of the higher ones.\n    const mappedPoints = points\n        .slice(0)\n        .sort((a, b) => a.indexInSeries - b.indexInSeries)\n        .sort((a, b) => b.seriesIndex - a.seriesIndex)\n        .map(point => {\n            return {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point) : null,\n                ariaLabel: ariaLabel ? ariaLabel(point) : undefined,\n                ariaLabelledBy: ariaLabelledBy ? ariaLabelledBy(point) : undefined,\n                ariaDescribedBy: ariaDescribedBy ? ariaDescribedBy(point) : undefined,\n                ariaHidden: ariaHidden ? ariaHidden(point) : undefined,\n                ariaDisabled: ariaDisabled ? ariaDisabled(point) : undefined,\n                onFocus: isFocusable\n                    ? () => {\n                          setCurrentPoint(point)\n                          showTooltipAt(\n                              createElement(tooltip, { point }),\n                              [margin.left + point.x, margin.top + point.y],\n                              'top'\n                          )\n                      }\n                    : undefined,\n                onBlur: isFocusable\n                    ? () => {\n                          setCurrentPoint(null)\n                          hideTooltip()\n                      }\n                    : undefined,\n            }\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol as any}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    ariaLabel={point.ariaLabel}\n                    ariaLabelledBy={point.ariaLabelledBy}\n                    ariaDescribedBy={point.ariaDescribedBy}\n                    ariaHidden={point.ariaHidden}\n                    ariaDisabled={point.ariaDisabled}\n                    isFocusable={isFocusable}\n                    onFocus={point.onFocus}\n                    onBlur={point.onBlur}\n                    testId={`line.point.${point.id}`}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport const Points = memo(NonMemoizedPoints) as typeof NonMemoizedPoints\n","import { createElement, memo, useCallback, MouseEvent, TouchEvent } from 'react'\nimport { Margin } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { LineSeries, Point, LineSvgProps, LineSvgPropsWithDefaults } from './types'\n\nconst NonMemoizedMesh = <Series extends LineSeries>({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    tooltip,\n    debug,\n    enableTouchCrosshair,\n}: {\n    points: Point<Series>[]\n    width: number\n    height: number\n    margin: Margin\n    setCurrent: (point: Point<Series> | null) => void\n    onMouseEnter?: LineSvgProps<Series>['onMouseEnter']\n    onMouseMove?: LineSvgProps<Series>['onMouseMove']\n    onMouseLeave?: LineSvgProps<Series>['onMouseLeave']\n    onMouseDown?: LineSvgProps<Series>['onMouseDown']\n    onMouseUp?: LineSvgProps<Series>['onMouseUp']\n    onClick?: LineSvgProps<Series>['onClick']\n    onDoubleClick?: LineSvgProps<Series>['onDoubleClick']\n    onTouchStart?: LineSvgProps<Series>['onTouchStart']\n    onTouchMove?: LineSvgProps<Series>['onTouchMove']\n    onTouchEnd?: LineSvgProps<Series>['onTouchEnd']\n    tooltip: LineSvgPropsWithDefaults<Series>['tooltip']\n    debug: boolean\n    enableTouchCrosshair: LineSvgPropsWithDefaults<Series>['enableTouchCrosshair']\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point: Point<Series>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseEnter?.(point, event)\n        },\n        [showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point: Point<Series>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseMove?.(point, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point: Point<Series>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(point, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleMouseDown = useCallback(\n        (point: Point<Series>, event: MouseEvent) => {\n            onMouseDown?.(point, event)\n        },\n        [onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (point: Point<Series>, event: MouseEvent) => {\n            onMouseUp?.(point, event)\n        },\n        [onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (point: Point<Series>, event: MouseEvent) => {\n            onClick?.(point, event)\n        },\n        [onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (point: Point<Series>, event: MouseEvent) => {\n            onDoubleClick?.(point, event)\n        },\n        [onDoubleClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (point: Point<Series>, event: TouchEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchStart?.(point, event)\n        },\n        [margin.left, margin.top, onTouchStart, showTooltipAt, tooltip]\n    )\n\n    const handleTouchMove = useCallback(\n        (point: Point<Series>, event: TouchEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchMove?.(point, event)\n        },\n        [margin.left, margin.top, onTouchMove, showTooltipAt, tooltip]\n    )\n\n    const handleTouchEnd = useCallback(\n        (point: Point<Series>, event: TouchEvent) => {\n            hideTooltip()\n            onTouchEnd?.(point, event)\n        },\n        [onTouchEnd, hideTooltip]\n    )\n\n    return (\n        <BaseMesh<Point<Series>>\n            nodes={points}\n            width={width}\n            height={height}\n            setCurrent={setCurrent}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onClick={handleClick}\n            onDoubleClick={handleDoubleClick}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            enableTouchCrosshair={enableTouchCrosshair}\n            debug={debug}\n        />\n    )\n}\n\nexport const Mesh = memo(NonMemoizedMesh) as typeof NonMemoizedMesh\n","import { Fragment, ReactNode, useState, forwardRef, Ref, ReactElement } from 'react'\nimport {\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    CartesianMarkers,\n    Container,\n    LineCurveFactoryId,\n    WithChartRef,\n} from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair, CrosshairType } from '@nivo/tooltip'\nimport { AnyScale } from '@nivo/scales'\nimport { useLine } from './hooks'\nimport { Areas } from './Areas'\nimport { Lines } from './Lines'\nimport { Slices } from './Slices'\nimport { Points } from './Points'\nimport { Mesh } from './Mesh'\nimport {\n    LineSeries,\n    InferSeriesId,\n    InferY,\n    LineLayerId,\n    LineSvgProps,\n    Point,\n    PointColorContext,\n    SliceData,\n    LineCustomSvgLayerProps,\n    PointTooltipComponent,\n    SliceTooltipComponent,\n    LineSvgPropsWithDefaults,\n} from './types'\nimport { svgDefaultProps } from './defaults'\n\nfunction InnerLine<Series extends LineSeries>(\n    props: LineSvgProps<Series> & { forwardedRef: Ref<SVGSVGElement> }\n) {\n    const {\n        data,\n        xScale: xScaleSpec = svgDefaultProps.xScale,\n        xFormat,\n        yScale: yScaleSpec = svgDefaultProps.yScale,\n        yFormat,\n        curve = svgDefaultProps.curve as LineCurveFactoryId,\n        margin: partialMargin,\n        width,\n        height,\n        colors = svgDefaultProps.colors as OrdinalColorScaleConfig<Series>,\n        lineWidth = svgDefaultProps.lineWidth as number,\n        layers = svgDefaultProps.layers as readonly LineLayerId[],\n        enableArea = svgDefaultProps.enableArea,\n        areaBaselineValue = svgDefaultProps.areaBaselineValue as InferY<Series>,\n        areaOpacity = svgDefaultProps.areaOpacity,\n        areaBlendMode = svgDefaultProps.areaBlendMode,\n        enablePoints = svgDefaultProps.enablePoints,\n        pointSymbol,\n        pointSize = svgDefaultProps.pointSize,\n        pointColor = svgDefaultProps.pointColor as InheritedColorConfig<PointColorContext<Series>>,\n        pointBorderWidth = svgDefaultProps.pointBorderWidth,\n        pointBorderColor = svgDefaultProps.pointBorderColor as InheritedColorConfig<\n            Omit<Point<Series>, 'borderColor'>\n        >,\n        enablePointLabel = svgDefaultProps.enablePointLabel,\n        pointLabel = svgDefaultProps.pointLabel as string,\n        pointLabelYOffset,\n        enableGridX = svgDefaultProps.enableGridX,\n        gridXValues,\n        enableGridY = svgDefaultProps.enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom = svgDefaultProps.axisBottom,\n        axisLeft = svgDefaultProps.axisLeft,\n        defs = svgDefaultProps.defs,\n        fill = svgDefaultProps.fill,\n        markers,\n        legends = svgDefaultProps.legends,\n        isInteractive = svgDefaultProps.isInteractive,\n        useMesh = svgDefaultProps.useMesh,\n        debugMesh = svgDefaultProps.debugMesh,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onMouseDown,\n        onMouseUp,\n        onClick,\n        onDoubleClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n        tooltip = svgDefaultProps.tooltip as PointTooltipComponent<Series>,\n        enableSlices = svgDefaultProps.enableSlices,\n        debugSlices = svgDefaultProps.debugSlices,\n        sliceTooltip = svgDefaultProps.sliceTooltip as SliceTooltipComponent<Series>,\n        enableCrosshair = svgDefaultProps.enableCrosshair,\n        crosshairType = svgDefaultProps.crosshairType as CrosshairType,\n        enableTouchCrosshair = svgDefaultProps.enableTouchCrosshair,\n        role = svgDefaultProps.role,\n        ariaLabel,\n        ariaLabelledBy,\n        ariaDescribedBy,\n        isFocusable = svgDefaultProps.isFocusable,\n        pointAriaLabel,\n        pointAriaLabelledBy,\n        pointAriaDescribedBy,\n        pointAriaHidden,\n        pointAriaDisabled,\n        initialHiddenIds = svgDefaultProps.initialHiddenIds as InferSeriesId<Series>[],\n        forwardedRef,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSeries,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine<Series>({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n        initialHiddenIds,\n    })\n\n    const [currentPoint, setCurrentPoint] = useState<Point<Series> | null>(null)\n    const [currentSlice, setCurrentSlice] = useState<SliceData<Series> | null>(null)\n\n    const layerById: Record<LineLayerId, ReactNode> = {\n        grid: null,\n        markers: null,\n        axes: null,\n        areas: null,\n        crosshair: null,\n        lines: null,\n        points: null,\n        slices: null,\n        mesh: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid') && (enableGridX || enableGridY)) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('markers') && Array.isArray(markers) && markers.length > 0) {\n        layerById.markers = (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Lines<Series>\n                key=\"lines\"\n                series={series}\n                lineGenerator={lineGenerator}\n                lineWidth={lineWidth}\n            />\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legend.data || legendData}\n                        toggleSerie={\n                            legend.toggleSerie\n                                ? (toggleSeries as (id: string | number) => void)\n                                : undefined\n                        }\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas<Series>\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                series={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices<Series>\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onMouseDown={onMouseDown}\n                onMouseUp={onMouseUp}\n                onClick={onClick}\n                onDoubleClick={onDoubleClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points<Series>\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                borderWidth={pointBorderWidth}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n                isFocusable={isFocusable}\n                setCurrentPoint={setCurrentPoint}\n                tooltip={tooltip}\n                margin={margin}\n                ariaLabel={pointAriaLabel}\n                ariaLabelledBy={pointAriaLabelledBy}\n                ariaDescribedBy={pointAriaDescribedBy}\n                ariaHidden={pointAriaHidden}\n                ariaDisabled={pointAriaDisabled}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null && enableSlices) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh<Series>\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onMouseDown={onMouseDown}\n                onMouseUp={onMouseUp}\n                onClick={onClick}\n                onDoubleClick={onDoubleClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n                tooltip={tooltip}\n                enableTouchCrosshair={enableTouchCrosshair}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const customLayerProps: LineCustomSvgLayerProps<Series> = {\n        ...(props as LineSvgPropsWithDefaults<Series>),\n        innerWidth,\n        innerHeight,\n        series,\n        slices,\n        points,\n        xScale,\n        yScale,\n        lineGenerator,\n        areaGenerator,\n        currentPoint,\n        setCurrentPoint,\n        currentSlice,\n        setCurrentSlice,\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{layer(customLayerProps)}</Fragment>\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Line = forwardRef(\n    <Series extends LineSeries>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...otherProps\n        }: LineSvgProps<Series>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerLine<Series> isInteractive={isInteractive} {...otherProps} forwardedRef={ref} />\n        </Container>\n    )\n) as <Series extends LineSeries>(\n    props: WithChartRef<LineSvgProps<Series>, SVGSVGElement>\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { Line } from './Line'\nimport { LineSvgProps, LineSeries } from './types'\n\nexport const ResponsiveLine = forwardRef(\n    <Series extends LineSeries>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<LineSvgProps<Series>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }: { width: number; height: number }) => (\n                <Line<Series> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <Series extends LineSeries>(\n    props: WithChartRef<ResponsiveProps<LineSvgProps<Series>>, SVGSVGElement>\n) => ReactElement\n","import {\n    createElement,\n    useRef,\n    useEffect,\n    useState,\n    useCallback,\n    forwardRef,\n    ForwardedRef,\n    MouseEvent,\n    useMemo,\n    ReactElement,\n    Ref,\n} from 'react'\nimport { useDimensions, getRelativeCursor, isCursorInRect, Container, mergeRefs } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { useLine } from './hooks'\nimport {\n    InferY,\n    LineCanvasProps,\n    LineLayerId,\n    LineSeries,\n    PointTooltipComponent,\n    Point,\n    LineCustomCanvasLayerProps,\n    PointColorContext,\n} from './types'\nimport { canvasDefaultProps } from './defaults'\nimport { AnyScale } from '@nivo/scales'\n\nconst InnerLineCanvas = <Series extends LineSeries>({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    curve = canvasDefaultProps.curve,\n    layers = canvasDefaultProps.layers as LineLayerId[],\n    colors = canvasDefaultProps.colors as OrdinalColorScaleConfig<Series>,\n    lineWidth = canvasDefaultProps.lineWidth,\n    enableArea = canvasDefaultProps.enableArea,\n    areaBaselineValue = canvasDefaultProps.areaBaselineValue as InferY<Series>,\n    areaOpacity = canvasDefaultProps.areaOpacity,\n    enablePoints = canvasDefaultProps.enablePoints,\n    pointSize = canvasDefaultProps.pointSize,\n    pointColor = canvasDefaultProps.pointColor as InheritedColorConfig<PointColorContext<Series>>,\n    pointBorderWidth = canvasDefaultProps.pointBorderWidth,\n    pointBorderColor = canvasDefaultProps.pointBorderColor as InheritedColorConfig<\n        Omit<Point<Series>, 'borderColor'>\n    >,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    legends = canvasDefaultProps.legends,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip = canvasDefaultProps.tooltip as PointTooltipComponent<Series>,\n    role,\n    forwardedRef,\n}: Omit<LineCanvasProps<Series>, 'renderWrapper' | 'theme'> & {\n    forwardedRef: Ref<HTMLCanvasElement>\n}) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState<Point<Series> | null>(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine<Series>({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const customLayerProps: LineCustomCanvasLayerProps<Series> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            series,\n            points,\n            xScale,\n            yScale,\n            lineWidth,\n            lineGenerator,\n            areaGenerator,\n            currentPoint,\n            setCurrentPoint,\n        }),\n        [\n            innerWidth,\n            innerHeight,\n            series,\n            points,\n            xScale,\n            yScale,\n            lineWidth,\n            lineGenerator,\n            areaGenerator,\n            currentPoint,\n            setCurrentPoint,\n        ]\n    )\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n\n            const gridLineWidth = theme.grid.line.strokeWidth ?? 0\n            if (layer === 'grid' && typeof gridLineWidth !== 'string' && gridLineWidth > 0) {\n                ctx.lineWidth = gridLineWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                if (enableGridX) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale as AnyScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n                }\n\n                if (enableGridY) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale as AnyScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n                }\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as AnyScale,\n                    yScale: yScale as AnyScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                for (let i = series.length - 1; i >= 0; i--) {\n                    ctx.fillStyle = series[i].color\n                    ctx.beginPath()\n                    areaGenerator(series[i].data.map(d => d.position))\n                    ctx.fill()\n                }\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(seriesItem => {\n                    ctx.strokeStyle = seriesItem.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(seriesItem.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true && voronoi !== undefined) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.absIndex)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        outerWidth,\n        innerHeight,\n        outerHeight,\n        margin.left,\n        margin.top,\n        pixelRatio,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        pointBorderWidth,\n        currentPoint,\n        customLayerProps,\n        debugMesh,\n        enableArea,\n        areaGenerator,\n        areaOpacity,\n        lineWidth,\n        voronoi,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (!canvasEl.current) return null\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, points]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            hideTooltip()\n            setCurrentPoint(null)\n            if (currentPoint) onMouseLeave?.(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave, currentPoint]\n    )\n\n    const handleMouseDown = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onMouseDown) {\n                const point = getPointFromMouseEvent(event)\n                if (point) onMouseDown(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onMouseUp) {\n                const point = getPointFromMouseEvent(event)\n                if (point) onMouseUp(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                if (point) onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onDoubleClick) {\n                const point = getPointFromMouseEvent(event)\n                if (point) onDoubleClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onDoubleClick]\n    )\n\n    return (\n        <canvas\n            ref={mergeRefs<HTMLCanvasElement>(canvasEl, forwardedRef)}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseDown={isInteractive ? handleMouseDown : undefined}\n            onMouseUp={isInteractive ? handleMouseUp : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            onDoubleClick={isInteractive ? handleDoubleClick : undefined}\n            role={role}\n        />\n    )\n}\n\nexport const LineCanvas = forwardRef(\n    <Series extends LineSeries>(\n        { isInteractive, renderWrapper, theme, ...props }: LineCanvasProps<Series>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerLineCanvas<Series> {...props} forwardedRef={ref} />\n        </Container>\n    )\n) as <Series extends LineSeries>(\n    props: LineCanvasProps<Series> & {\n        ref?: ForwardedRef<HTMLCanvasElement>\n    }\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { LineCanvasProps, LineSeries } from './types'\nimport { LineCanvas } from './LineCanvas'\n\nexport const ResponsiveLineCanvas = forwardRef(\n    <Series extends LineSeries>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<LineCanvasProps<Series>>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultWidth}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }: { width: number; height: number }) => (\n                <LineCanvas<Series> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <Series extends LineSeries>(\n    props: WithChartRef<ResponsiveProps<LineCanvasProps<Series>>, HTMLCanvasElement>\n) => ReactElement\n","import { FunctionComponent, MouseEvent, TouchEvent, AriaAttributes } from 'react'\nimport { Line, Area } from 'd3-shape'\nimport {\n    Dimensions,\n    Box,\n    MotionProps,\n    CssMixBlendMode,\n    ValueFormat,\n    SvgDefsAndFill,\n    CartesianMarkerProps,\n    PropertyAccessor,\n    LineCurveFactoryId,\n    DotsItemSymbolComponent,\n} from '@nivo/core'\nimport { PartialTheme } from '@nivo/theming'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleSpec, TicksSpec } from '@nivo/scales'\nimport { LegendProps } from '@nivo/legends'\nimport { CrosshairType } from '@nivo/tooltip'\n\nexport type AllowedSeriesId = string | number\n// `null` is allowed in the data to indicate a missing value.\nexport type AllowedValue = string | number | Date | null\nexport type LineSeries = {\n    id: AllowedSeriesId\n    data: readonly { x: AllowedValue; y: AllowedValue }[]\n}\n\nexport type InferSeriesId<T> = T extends { id: infer Id } ? Id : never\n\nexport type InferX<T> = T extends { data: ReadonlyArray<infer D> }\n    ? D extends { x: infer X }\n        ? X\n        : never\n    : never\nexport type InferY<T> = T extends { data: ReadonlyArray<infer D> }\n    ? D extends { y: infer Y }\n        ? Y\n        : never\n    : never\n\nexport type DefaultSeries = {\n    id: string\n    data: readonly {\n        x: string | null\n        y: number | null\n    }[]\n}\n\nexport interface ComputedDatum<Series extends LineSeries> {\n    data: Series['data'][number]\n    position: {\n        x: number\n        y: number\n    }\n}\n\nexport type ComputedSeries<Series extends LineSeries> = Omit<Series, 'data' | 'id'> & {\n    id: InferSeriesId<Series>\n    data: readonly ComputedDatum<Series>[]\n    color: string\n}\n\nexport interface Point<Series extends LineSeries> {\n    id: string\n    indexInSeries: number\n    absIndex: number\n    seriesIndex: number\n    seriesId: InferSeriesId<Series>\n    seriesColor: string\n    x: number\n    y: number\n    color: string\n    borderColor: string\n    data: Series['data'][number] & {\n        xFormatted: string\n        yFormatted: string\n    }\n}\n\nexport type PointColorContext<Series extends LineSeries> = {\n    series: ComputedSeries<Series>\n    point: Omit<Point<Series>, 'color' | 'borderColor'>\n}\n\nexport interface SliceData<Series extends LineSeries> {\n    id: string\n    x0: number\n    x: number\n    y0: number\n    y: number\n    width: number\n    height: number\n    points: readonly Point<Series>[]\n}\n\nexport type PointOrSliceData<Series extends LineSeries> = Point<Series> | SliceData<Series>\nexport function isPoint<Series extends LineSeries>(\n    data: PointOrSliceData<Series>\n): data is Point<Series> {\n    return (data as Point<Series>).seriesId !== undefined\n}\nexport function isSliceData<Series extends LineSeries>(\n    data: PointOrSliceData<Series>\n): data is SliceData<Series> {\n    return (data as SliceData<Series>).points !== undefined\n}\n\nexport interface DataProps<Series extends LineSeries> {\n    data: readonly Series[]\n}\n\nexport type LineGenerator = Line<{ x: number; y: number }>\nexport type AreaGenerator = Area<{ x: number; y: number }>\n\nexport interface PointTooltipProps<Series extends LineSeries> {\n    point: Point<Series>\n}\nexport type PointTooltipComponent<Series extends LineSeries> = FunctionComponent<\n    PointTooltipProps<Series>\n>\n\nexport interface SliceTooltipProps<Series extends LineSeries> {\n    axis: 'x' | 'y'\n    slice: SliceData<Series>\n}\nexport type SliceTooltipComponent<Series extends LineSeries> = FunctionComponent<\n    SliceTooltipProps<Series>\n>\n\nexport type PointOrSliceMouseHandler<Series extends LineSeries> = (\n    datum: Readonly<Point<Series>> | Readonly<SliceData<Series>>,\n    event: MouseEvent\n) => void\nexport type PointOrSliceTouchHandler<Series extends LineSeries> = (\n    datum: Readonly<Point<Series>> | Readonly<SliceData<Series>>,\n    event: TouchEvent\n) => void\n\nexport type LineLayerId =\n    | 'grid'\n    | 'markers'\n    | 'axes'\n    | 'areas'\n    | 'crosshair'\n    | 'lines'\n    | 'slices'\n    | 'points'\n    | 'mesh'\n    | 'legends'\n\nexport interface CommonCustomLayerProps<Series extends LineSeries> {\n    innerWidth: number\n    innerHeight: number\n    series: readonly ComputedSeries<Series>[]\n    points: readonly Point<Series>[]\n    xScale: (x: InferX<Series>) => number\n    yScale: (y: InferY<Series>) => number\n    lineGenerator: LineGenerator\n    areaGenerator: AreaGenerator\n    currentPoint: Point<Series> | null\n    setCurrentPoint: (point: Point<Series> | null) => void\n}\n\nexport type LineCustomSvgLayerProps<Series extends LineSeries> = Omit<\n    LineSvgPropsWithDefaults<Series>,\n    'xScale' | 'yScale'\n> &\n    CommonCustomLayerProps<Series> & {\n        slices: readonly SliceData<Series>[]\n        currentSlice: SliceData<Series> | null\n        setCurrentSlice: (slice: SliceData<Series> | null) => void\n    }\nexport type LineCustomSvgLayer<Series extends LineSeries> = FunctionComponent<\n    LineCustomSvgLayerProps<Series>\n>\nexport type LineSvgLayer<Series extends LineSeries> = LineLayerId | LineCustomSvgLayer<Series>\n\nexport type LineCustomCanvasLayerProps<Series extends LineSeries> = CommonCustomLayerProps<Series>\nexport type LineCustomCanvasLayer<Series extends LineSeries> = (\n    context: CanvasRenderingContext2D,\n    props: LineCustomCanvasLayerProps<Series>\n) => void\nexport type LineCanvasLayer<Series extends LineSeries> = LineLayerId | LineCustomCanvasLayer<Series>\n\nexport type CommonLineProps<Series extends LineSeries> = {\n    xScale: ScaleSpec\n    xFormat?: ValueFormat<InferX<Series>>\n    yScale: ScaleSpec\n    yFormat?: ValueFormat<InferY<Series>>\n    margin: Box\n    curve: LineCurveFactoryId\n    theme: PartialTheme\n    colors: OrdinalColorScaleConfig<Series>\n    lineWidth: number\n    enablePoints: boolean\n    pointSymbol?: DotsItemSymbolComponent<Point<Series>>\n    pointSize: number\n    pointColor: InheritedColorConfig<PointColorContext<Series>>\n    pointBorderWidth: number\n    pointBorderColor: InheritedColorConfig<Omit<Point<Series>, 'borderColor'>>\n    enableArea: boolean\n    areaBaselineValue: InferY<Series>\n    areaOpacity: number\n    enableGridX: boolean\n    gridXValues?: TicksSpec<InferX<Series>>\n    enableGridY: boolean\n    gridYValues?: TicksSpec<InferY<Series>>\n    legends: readonly LegendProps[]\n    isInteractive: boolean\n    debugMesh: boolean\n    onMouseEnter?: PointOrSliceMouseHandler<Series>\n    onMouseMove?: PointOrSliceMouseHandler<Series>\n    onMouseLeave?: PointOrSliceMouseHandler<Series>\n    onMouseDown?: PointOrSliceMouseHandler<Series>\n    onMouseUp?: PointOrSliceMouseHandler<Series>\n    onClick?: PointOrSliceMouseHandler<Series>\n    onDoubleClick?: PointOrSliceMouseHandler<Series>\n    onTouchStart?: PointOrSliceTouchHandler<Series>\n    onTouchMove?: PointOrSliceTouchHandler<Series>\n    onTouchEnd?: PointOrSliceTouchHandler<Series>\n    tooltip: PointTooltipComponent<Series>\n    sliceTooltip: SliceTooltipComponent<Series>\n    renderWrapper: boolean\n    role?: string\n}\n\nexport interface LineSvgExtraProps<Series extends LineSeries> {\n    layers: readonly LineSvgLayer<Series>[]\n    enablePointLabel: boolean\n    pointLabel: PropertyAccessor<Point<Series>, string>\n    pointLabelYOffset?: number\n    areaBlendMode: CssMixBlendMode\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    useMesh: boolean\n    enableSlices: 'x' | 'y' | false\n    debugSlices: boolean\n    enableCrosshair: boolean\n    crosshairType: CrosshairType\n    enableTouchCrosshair: boolean\n    markers?: readonly CartesianMarkerProps[]\n    initialHiddenIds: readonly InferSeriesId<Series>[]\n    animate: boolean\n    motionConfig: MotionProps['motionConfig']\n    ariaLabel?: AriaAttributes['aria-label']\n    ariaLabelledBy?: AriaAttributes['aria-labelledby']\n    ariaDescribedBy?: AriaAttributes['aria-describedby']\n    isFocusable: boolean\n    pointAriaLabel?: (point: Point<Series>) => AriaAttributes['aria-label']\n    pointAriaLabelledBy?: (point: Point<Series>) => AriaAttributes['aria-labelledby']\n    pointAriaDescribedBy?: (point: Point<Series>) => AriaAttributes['aria-describedby']\n    pointAriaHidden?: (point: Point<Series>) => AriaAttributes['aria-hidden']\n    pointAriaDisabled?: (point: Point<Series>) => AriaAttributes['aria-disabled']\n}\nexport type LineSvgProps<Series extends LineSeries> = DataProps<Series> &\n    Dimensions &\n    Partial<CommonLineProps<Series>> &\n    Partial<LineSvgExtraProps<Series>> &\n    SvgDefsAndFill<any>\nexport type LineSvgPropsWithDefaults<Series extends LineSeries> = DataProps<Series> &\n    Dimensions &\n    CommonLineProps<Series> &\n    LineSvgExtraProps<Series> &\n    SvgDefsAndFill<any>\n\nexport interface LineCanvasExtraProps<Series extends LineSeries> {\n    layers: readonly LineCanvasLayer<Series>[]\n    pixelRatio: number\n    axisTop?: CanvasAxisProps | null\n    axisRight?: CanvasAxisProps | null\n    axisBottom?: CanvasAxisProps | null\n    axisLeft?: CanvasAxisProps | null\n}\nexport type LineCanvasProps<Series extends LineSeries> = DataProps<Series> &\n    Dimensions &\n    Partial<CommonLineProps<Series>> &\n    Partial<LineCanvasExtraProps<Series>>\nexport type LineCanvasPropsWithDefaults<Series extends LineSeries> = DataProps<Series> &\n    Dimensions &\n    CommonLineProps<Series> &\n    LineCanvasExtraProps<Series>\n"],"names":["commonDefaultProps","xScale","type","yScale","min","max","curve","colors","scheme","lineWidth","layers","enablePoints","pointSize","pointColor","from","pointBorderWidth","pointBorderColor","theme","enableArea","areaBaselineValue","areaOpacity","enableGridX","enableGridY","legends","isInteractive","tooltip","memo","_ref","point","_jsx","BasicTooltip","id","_jsxs","jsxs","children","jsx","data","xFormatted","yFormatted","enableChip","color","seriesColor","sliceTooltip","slice","axis","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","chip","seriesId","tableCellValue","debugMesh","renderWrapper","svgDefaultProps","_extends","defs","fill","enablePointLabel","pointLabel","areaBlendMode","axisTop","axisRight","axisBottom","defaultAxisProps","axisLeft","useMesh","enableSlices","debugSlices","enableCrosshair","crosshairType","enableTouchCrosshair","initialHiddenIds","animate","motionConfig","role","isFocusable","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","useLineGenerator","useMemo","line","defined","d","x","y","curveFromProp","useAreaGenerator","area","y1","y0","useSlices","_ref3","componentId","width","height","Map","forEach","has","get","push","set","Array","entries","sort","a","b","_ref4","i","slices","x0","sliceWidth","slicePoints","prevSlice","nextSlice","reverse","_ref5","sliceHeight","LINE_UNIQUE_ID_PREFIX","useLine","_ref6","_ref6$xScale","xScaleSpec","xFormat","_ref6$yScale","yScaleSpec","yFormat","_ref6$colors","_ref6$curve","_ref6$areaBaselineVal","_ref6$pointColor","_ref6$pointBorderColo","_ref6$enableSlices","_ref6$initialHiddenId","useState","uniqueId","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","_useState2","hiddenIds","setHiddenIds","_useMemo","computeXYScalesForSeries","filter","item","indexOf","rawSeries","series","_useMemo2","dataWithColor","seriesItem","label","datum","find","Boolean","legendData","hidden","toggleSeries","useCallback","state","concat","_ref2","reduce","acc","seriesIndex","position","indexInSeries","absIndex","length","borderColor","usePoints","lineGenerator","areaGenerator","AreaPath","path","_useMotionConfig","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","Areas","reversedSeries","LinesItem","thickness","stroke","Lines","_Fragment","SlicesItem","debug","isCurrent","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onMouseDown","onMouseUp","onClick","onDoubleClick","onTouchStart","onTouchMove","onTouchEnd","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleMouseDown","handleMouseUp","handleClick","handleDoubleClick","handeOnTouchStart","handeOnTouchMove","touchPoint","touches","touchingElement","document","elementFromPoint","clientX","clientY","touchingSliceId","getAttribute","handleOnTouchEnd","strokeOpacity","Slices","current","Points","symbol","size","borderWidth","enableLabel","labelYOffset","setCurrentPoint","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaHidden","ariaDisabled","getLabel","getLabelGenerator","showTooltipAt","mappedPoints","undefined","onFocus","left","top","onBlur","DotsItem","testId","Mesh","handleTouchStart","handleTouchMove","handleTouchEnd","BaseMesh","nodes","InnerLine","props","_props$xScale","_props$yScale","_props$curve","partialMargin","_props$colors","_props$lineWidth","_props$layers","_props$enableArea","_props$areaBaselineVa","_props$areaOpacity","_props$areaBlendMode","_props$enablePoints","pointSymbol","_props$pointSize","_props$pointColor","_props$pointBorderWid","_props$pointBorderCol","_props$enablePointLab","_props$pointLabel","pointLabelYOffset","_props$enableGridX","gridXValues","_props$enableGridY","gridYValues","_props$axisBottom","_props$axisLeft","_props$defs","_props$fill","markers","_props$legends","_props$isInteractive","_props$useMesh","_props$debugMesh","_props$tooltip","_props$enableSlices","_props$debugSlices","_props$sliceTooltip","_props$enableCrosshai","_props$crosshairType","_props$enableTouchCro","_props$role","_props$isFocusable","pointAriaLabel","pointAriaLabelledBy","pointAriaDescribedBy","pointAriaHidden","pointAriaDisabled","_props$initialHiddenI","forwardedRef","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useLine","_useState","currentPoint","currentSlice","setCurrentSlice","layerById","grid","axes","areas","crosshair","lines","mesh","includes","Grid","xValues","yValues","isArray","CartesianMarkers","Axes","right","bottom","Fragment","legend","BoxLegendSvg","containerWidth","containerHeight","toggleSerie","boundDefs","bindDefs","Crosshair","customLayerProps","SvgWrapper","ref","layer","Line","forwardRef","_ref$isInteractive","_ref$animate","_ref$motionConfig","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveLine","defaultWidth","defaultHeight","onResize","debounceResize","ResponsiveWrapper","InnerLineCanvas","_ref$pixelRatio","_ref$xScale","_ref$yScale","_ref$curve","_ref$layers","_ref$colors","_ref$lineWidth","_ref$enableArea","_ref$areaBaselineValu","_ref$areaOpacity","_ref$enablePoints","_ref$pointSize","_ref$pointColor","_ref$pointBorderWidth","_ref$pointBorderColor","_ref$enableGridX","_ref$enableGridY","_ref$axisBottom","_ref$axisLeft","_ref$legends","_ref$debugMesh","_ref$tooltip","canvasEl","useRef","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","translate","_theme$grid$line$stro","gridLineWidth","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","context","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","serie","renderLegendToCanvas","getPointFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","mergeRefs","cursor","LineCanvas","ResponsiveLineCanvas"],"mappings":"6sBAIO,MCOMA,EAyBT,CACAC,OAAQ,CACJC,KAAM,SAEVC,OAAQ,CACJD,KAAM,SACNE,IAAK,EACLC,IAAK,QAETC,MAAO,SACPC,OAAQ,CAAEC,OAAQ,QAClBC,UAAW,EACXC,OAAQ,CACJ,OACA,UACA,OACA,QACA,YACA,QACA,SACA,SACA,OACA,WAEJC,cAAc,EACdC,UAAW,EACXC,WAAY,CAAEC,KAAM,gBACpBC,iBAAkB,EAClBC,iBAAkB,CAAEC,MAAO,cAC3BC,YAAY,EACZC,kBAAmB,EACnBC,YAAa,GACbC,aAAa,EACbC,aAAa,EACbC,QAAS,GACTC,eAAe,EACfC,QDnDwBC,EAAIA,MAjBO,SAAHC,GAEH,IAD7BC,EAAKD,EAALC,MAEA,OACIC,EAAAA,IAACC,EAAAA,aAAY,CACTC,GACIC,EAAAC,KAAA,OAAA,CAAAC,SAAA,CAAM,MACCL,EAAAM,IAAA,SAAA,CAAAD,SAASN,EAAMQ,KAAKC,aAAoB,OAAK,IAChDR,EAAAA,IAAA,SAAA,CAAAK,SAASN,EAAMQ,KAAKE,gBAG5BC,YAAY,EACZC,MAAOZ,EAAMa,aAGzB,ICsDIC,aChDwBhB,EAAIA,MApBO,SAAHC,GAGH,IAF7BgB,EAAKhB,EAALgB,MACAC,EAAIjB,EAAJiB,KAEM3B,EAAQ4B,EAAAA,WACRC,EAAqB,MAATF,EAAe,IAAM,IAEvC,OACIf,EAAAA,IAACkB,EAAAA,aAAY,CACTC,KAAML,EAAMM,OAAOC,KAAI,SAAAtB,GAAK,MAAI,CAC5BC,EAAAM,IAACgB,OAAI,CAAYX,MAAOZ,EAAMa,YAAaW,MAAOnC,EAAMQ,QAAQ4B,MAAtD,QACVzB,EAAM0B,SACNzB,EAAAA,IAAA,OAAA,CAAkBuB,MAAOnC,EAAMQ,QAAQ8B,eAAerB,SACjDN,EAAMQ,KAAQU,EAAS,cADlB,SAGb,KAGb,IDmDIU,WAAW,EACXC,eAAe,GAGNC,EAGZC,KACM3D,EAAkB,CACrB4D,KAAM,GACNC,KAAM,GACNC,kBAAkB,EAClBC,WAAY,kBACZC,cAAe,SACfC,QAAS,KACTC,UAAW,KACXC,WAAYC,EAAgBA,iBAC5BC,SAAUD,EAAgBA,iBAC1BE,SAAS,EACTC,cAAc,EACdC,aAAa,EACbC,iBAAiB,EACjBC,cAAe,cACfC,sBAAsB,EACtBC,iBAAkB,GAClBC,SAAS,EACTC,aAAc,SACdC,KAAM,MACNC,aAAa,IAGJC,EAGZtB,KACM3D,EAAkB,CACrBkF,WAA8B,oBAAXC,QAAiDC,OAA3BA,EAAID,OAAOE,kBAAgBD,EAAS,EAC7EnB,QAAS,KACTC,UAAW,KACXC,WAAYC,EAAgBA,iBAC5BC,SAAUD,EAAAA,mBEpFP,SAASkB,EAAiBhF,GAC7B,OAAOiF,EAAOA,SAAC,WACX,OAAOC,SAIFC,SAAQ,SAAAC,GAAC,OAAY,OAARA,EAAEC,GAAsB,OAARD,EAAEE,CAAU,IACzCD,GAAE,SAAAD,GAAC,OAAIA,EAAEC,CAAC,IACVC,GAAE,SAAAF,GAAC,OAAIA,EAAEE,CAAC,IACVtF,MAAMuF,gBAAcvF,GAC7B,GAAG,CAACA,GACR,CAEO,SAASwF,EAAgBnE,GAQd,IAPdrB,EAAKqB,EAALrB,MACAH,EAAMwB,EAANxB,OACAgB,EAAiBQ,EAAjBR,kBAMA,OAAOoE,EAAOA,SAAC,WACX,OAAOQ,SAIFN,SAAQ,SAAAC,GAAC,OAAY,OAARA,EAAEC,GAAsB,OAARD,EAAEE,CAAU,IACzCD,GAAE,SAAAD,GAAC,OAAIA,EAAEC,CAAC,IACVK,IAAG,SAAAN,GAAC,OAAIA,EAAEE,CAAC,IACXtF,MAAMuF,EAAAA,cAAcvF,IACpB2F,GAAG9F,EAAOgB,GAClB,GAAE,CAACb,EAAOH,EAAQgB,GACvB,KAuDa+E,EAAY,SAAHC,GAYhB,IAXFC,EAAWD,EAAXC,YACA7B,EAAY4B,EAAZ5B,aACAtB,EAAMkD,EAANlD,OACAoD,EAAKF,EAALE,MACAC,EAAMH,EAANG,OAQA,OAAOf,EAAOA,SAAC,WACX,GAAqB,MAAjBhB,EAAsB,CACtB,IAAMrB,EAAM,IAAIqD,IAOhB,OANAtD,EAAOuD,SAAQ,SAAA5E,GACU,OAAjBA,EAAMQ,KAAKuD,GAA+B,OAAjB/D,EAAMQ,KAAKwD,IACnC1C,EAAIuD,IAAI7E,EAAM+D,GACdzC,EAAIwD,IAAI9E,EAAM+D,GAAGgB,KAAK/E,GADJsB,EAAI0D,IAAIhF,EAAM+D,EAAG,CAAC/D,IAE7C,IAEOiF,MAAM/F,KAAKoC,EAAI4D,WACjBC,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAG,IAC3B/D,KAAI,SAAAgE,EAAmBC,EAAGC,GAAW,IAI9BC,EAIAC,EARD3B,EAACuB,EAAA,GAAEK,EAAWL,EAAA,GACXM,EAAYJ,EAAOD,EAAI,GACvBM,EAAYL,EAAOD,EAAI,GAU7B,OANKE,EADAG,EACK7B,GAAKA,EAAI6B,EAAU,IAAM,EADd7B,EAKhB2B,EADAG,EACa9B,EAAI0B,GAAMI,EAAU,GAAK9B,GAAK,EADnBU,EAAQgB,EAG9B,CACHtF,GAAE,SAAWqE,EAAW,IAAIT,EAC5B0B,GAAAA,EACA1B,EAAAA,EACAM,GAAI,EACJL,EAAG,EACHS,MAAOiB,EACPhB,OAAAA,EACArD,OAAQsE,EAAYG,UAE5B,GACR,CAAO,GAAqB,MAAjBnD,EAAsB,CAC7B,IAAMrB,EAAM,IAAIqD,IAOhB,OANAtD,EAAOuD,SAAQ,SAAA5E,GACU,OAAjBA,EAAMQ,KAAKuD,GAA+B,OAAjB/D,EAAMQ,KAAKwD,IACnC1C,EAAIuD,IAAI7E,EAAMgE,GACd1C,EAAIwD,IAAI9E,EAAMgE,GAAGe,KAAK/E,GADJsB,EAAI0D,IAAIhF,EAAMgE,EAAG,CAAChE,IAE7C,IAEOiF,MAAM/F,KAAKoC,EAAI4D,WACjBC,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAG,IAC3B/D,KAAI,SAAAyE,EAAmBR,EAAGC,GAAW,IAI9BnB,EAIA2B,EARDhC,EAAC+B,EAAA,GAAEJ,EAAWI,EAAA,GACXH,EAAYJ,EAAOD,EAAI,GACvBM,EAAYL,EAAOD,EAAI,GAU7B,OANKlB,EADAuB,EACK5B,GAAKA,EAAI4B,EAAU,IAAM,EADd5B,EAKhBgC,EADAH,EACc7B,EAAIK,GAAMwB,EAAU,GAAK7B,GAAK,EADnBU,EAASL,EAGhC,CACHlE,GAAI6D,EACJyB,GAAI,EACJ1B,EAAG,EACHM,GAAAA,EACAL,EAAAA,EACAS,MAAAA,EACAC,OAAQsB,EACR3E,OAAQsE,EAAYG,UAE5B,GACR,CAEA,MAAO,EACX,GAAG,CAACtB,EAAa7B,EAAc+B,EAAQrD,EAAQoD,GACnD,EAEawB,EAAwB,OAExBC,EAAU,SAAHC,GAoDf,IAnDD3F,EAAI2F,EAAJ3F,KAAI4F,EAAAD,EACJ9H,OAAQgI,OAAU,IAAAD,EAAGhI,EAAmBC,OAAM+H,EAC9CE,EAAOH,EAAPG,QAAOC,EAAAJ,EACP5H,OAAQiI,OAAU,IAAAD,EAAGnI,EAAmBG,OAAMgI,EAC9CE,EAAON,EAAPM,QACAhC,EAAK0B,EAAL1B,MACAC,EAAMyB,EAANzB,OAAMgC,EAAAP,EACNxH,OAAAA,OAAM,IAAA+H,EAAGtI,EAAmBO,OAAM+H,EAAAC,EAAAR,EAClCzH,MAAAA,OAAK,IAAAiI,EAAGvI,EAAmBM,MAAKiI,EAAAC,EAAAT,EAChC5G,kBAAAA,OAAiB,IAAAqH,EAAGxI,EAAmBmB,kBAAiBqH,EAAAC,EAAAV,EACxDlH,WAAAA,OAAU,IAAA4H,EAAGzI,EAAmBa,WAAU4H,EAAAC,EAAAX,EAC1C/G,iBAAAA,OAAgB,IAAA0H,EAAG1I,EAAmBgB,iBAAgB0H,EAAAC,EAAAZ,EAGtDxD,aAAAA,OAAY,IAAAoE,EAAGjF,EAAgBa,aAAYoE,EAAAC,EAAAb,EAI3CnD,iBAAAA,OAAgB,IAAAgE,EAAGlF,EAAgBkB,iBAAgBgE,EAkC5CxC,EAAeyC,EAAAA,SAASC,EAASjB,IAAtB,GACZkB,EAAUC,oBAAkBd,GAC5Be,EAAUD,oBAAkBX,GAC5Ba,EAAWC,EAAAA,qBAAqB5I,EAAQ,MACxCU,EAAQ4B,EAAAA,WACRuG,EAAgBC,EAAAA,kBAAkBxI,EAAYI,GAC9CqI,EAAsBD,EAAAA,kBAAkBrI,EAAkBC,GAChEsI,EAAkCV,EAAAA,SAASjE,MAAAA,EAAAA,EAAoB,IAAxD4E,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9BG,EAIInE,EAAAA,SACA,WAAA,OACIoE,2BACIvH,EAAKwH,QAAO,SAAAC,GAAI,OAA6D,IAAzDL,EAAUM,QAAQD,EAAK9H,GAAoC,IAC/EkG,EACAG,EACA/B,EACAC,EACH,GACL,CAAClE,EAAMoH,EAAWvB,EAAYG,EAAY/B,EAAOC,IAZjDrG,EAAMyJ,EAANzJ,OACAE,EAAMuJ,EAANvJ,OACQ4J,EAASL,EAAjBM,OAaJC,EAA+B1E,EAAAA,SAAQ,WACnC,IAAM2E,EAAgB9H,EAAKc,KAAI,SAAAiH,GAAU,MAAK,CAC1CpI,GAAIoI,EAAWpI,GACfqI,MAAK,GAAKD,EAAWpI,GACrBS,MAAO0G,EAASiB,GACnB,IAEKH,EAASE,EACVhH,KAAI,SAAAmH,GAAK,OAAA1G,EACHoG,CAAAA,EAAAA,EAAUO,MAAK,SAAAH,GAAU,OAAIA,EAAWpI,KAAOsI,EAAMtI,MAAG,CAC3DS,MAAO6H,EAAM7H,OAAK,IAErBoH,QAAO,SAAAC,GAAI,OAAIU,QAAQV,EAAK9H,OASjC,MAAO,CAAEyI,WAPUN,EACdhH,KAAI,SAAA2G,GAAI,OAAAlG,KACFkG,EAAI,CACPY,QAAST,EAAOM,MAAK,SAAAH,GAAU,OAAIA,EAAWpI,KAAO8H,EAAK9H,EAAE,KAAC,IAEhE2F,UAEgBsC,OAAAA,EACxB,GAAE,CAAC5H,EAAM2H,EAAWb,IAtBbsB,EAAUP,EAAVO,WAAYR,EAAMC,EAAND,OAwBdU,GAAeC,eAAY,SAAC5I,GAC9B0H,GAAa,SAAAmB,GAAK,OACdA,EAAMd,QAAQ/H,IAAO,EAAI6I,EAAMhB,QAAO,SAAAC,GAAI,OAAIA,IAAS9H,CAAE,OAAC8I,OAAOD,EAAK,CAAE7I,GAAG,GAElF,GAAE,IAEGkB,GAzPV,SAAkB6H,GAYf,IAXCd,EAAMc,EAANd,OACAZ,EAAa0B,EAAb1B,cACAE,EAAmBwB,EAAnBxB,oBACAP,EAAO+B,EAAP/B,QACAE,EAAO6B,EAAP7B,QAQA,OAAO1D,EAAOA,SAAC,WACX,OAAOyE,EAAOe,QAAO,SAACC,EAAKb,EAAYc,GACnC,MAAAJ,GAAAA,OACOG,EACAb,EAAW/H,KACTwH,QAAO,SAAAS,GAAK,OAAyB,OAArBA,EAAMa,SAASvF,GAAmC,OAArB0E,EAAMa,SAAStF,CAAU,IACtE1C,KAAI,SAACmH,EAAOc,GACT,IAAMvJ,EAGF,CACAG,GAAOoI,EAAWpI,OAAMoJ,EACxBA,cAAAA,EACAC,SAAUJ,EAAIK,OAASF,EACvBF,YAAAA,EACA3H,SAAU6G,EAAWpI,GACrBU,YAAa0H,EAAW3H,MACxBmD,EAAG0E,EAAMa,SAASvF,EAClBC,EAAGyE,EAAMa,SAAStF,EAClBxD,KAAIuB,EACG0G,GAAAA,EAAMjI,KAAI,CACbC,WAAY0G,EAAQsB,EAAMjI,KAAKuD,GAC/BrD,WAAY2G,EAAQoB,EAAMjI,KAAKwD,MAWvC,OARAhE,EAAMY,MAAQ4G,EAAc,CACxBY,OAAQG,EACRvI,MAAOA,IAEXA,EAAM0J,YAAchC,EAChB1H,GAGGA,CACV,IAEZ,GAAE,GACP,GAAG,CAACoI,EAAQZ,EAAeE,EAAqBP,EAASE,GAC7D,CAsMmBsC,CAAkB,CAC7BvB,OAAAA,EACAZ,cAAAA,EACAE,oBAAAA,EACAP,QAAAA,EACAE,QAAAA,IAGE7B,GAASlB,EAAkB,CAC7BE,YAAAA,EACA7B,aAAAA,EACAtB,OAAAA,GACAoD,MAAAA,EACAC,OAAAA,IAUJ,MAAO,CACHkE,WAAAA,EACAE,aAAAA,GACAc,cAVkBlG,EAAiBhF,GAWnCmL,cAVkB3F,EAAiC,CACnDxF,MAAAA,EACAH,OAAQA,EACRgB,kBAAAA,IAQA+H,SAAAA,EACAc,OAAAA,EACA/J,OAAQA,EACRE,OAAQA,EACRiH,OAAAA,GACAnE,OAAAA,GAER,ECxVMyI,EAAW,SAAH/J,GAYR,IAXFqC,EAAarC,EAAbqC,cACA5C,EAAWO,EAAXP,YACAoB,EAAKb,EAALa,MACAqB,EAAIlC,EAAJkC,KACA8H,EAAIhK,EAAJgK,KAQAC,EAA0CC,EAAAA,kBAAlChH,EAAO+G,EAAP/G,QAAiBiH,EAAYF,EAApBG,OAEXC,EAAeC,kBAAgBN,GAC/BO,EAAgBC,EAAAA,UAAU,CAC5B3J,MAAAA,EACAuJ,OAAQD,EACRM,WAAYvH,IAGhB,OACIhD,EAAAM,IAACkK,EAAQA,SAACV,KAAI,CACVjG,EAAGsG,EACHnI,KAAMA,GAAcqI,EAAc1J,MAClC8J,YAAalL,EACbmL,YAAa,EACbnJ,MAAO,CACHoJ,aAAcxI,IAI9B,EA4BayI,EAAQ/K,EAAIA,MA1BA,SAAHoJ,GAUhB,IATFW,EAAaX,EAAbW,cACArK,EAAW0J,EAAX1J,YACA4C,EAAa8G,EAAb9G,cAQM0I,EAPA5B,EAANd,OAO8BrH,MAAM,GAAG+E,UAEvC,OACI7F,EAAAA,IAAA,IAAA,CAAAK,SACKwK,EAAexJ,KAAI,SAAAiH,GAAU,OAC1BtI,EAAAM,IAACuJ,EAAQ/H,EAAA,CAELgI,KAAMF,EAActB,EAAW/H,KAAKc,KAAI,SAAAwC,GAAC,OAAIA,EAAEwF,cAAYvH,EAAA,CACrDvC,YAAAA,EAAa4C,cAAAA,GAAkBmG,IAAU,GAFvCA,EAAWpI,QAOvC,IC1Ca4K,EAAYjL,EAAIA,MAjBO,SAAHC,GAU3B,IATF6J,EAAa7J,EAAb6J,cACAvI,EAAMtB,EAANsB,OACAT,EAAKb,EAALa,MACAoK,EAASjL,EAATiL,UAOMjB,EAAOpG,EAAAA,SAAQ,WAAA,OAAMiG,EAAcvI,EAAO,GAAE,CAACuI,EAAevI,IAC5D+I,EAAeC,kBAAgBN,GAErC,OAAO9J,EAAAM,IAACkK,EAAQA,SAACV,KAAI,CAACjG,EAAGsG,EAAcnI,KAAK,OAAO0I,YAAaK,EAAWC,OAAQrK,GACvF,ICWasK,EAAQpL,EAAIA,MA3BO,SAAHC,GAQvB,IAPFqI,EAAMrI,EAANqI,OACAwB,EAAa7J,EAAb6J,cACA/K,EAASkB,EAATlB,UAMA,OACIoB,EAAAA,IAAAkL,EAAAA,SAAA,CAAA7K,SACK8H,EACIrH,MAAM,GACN+E,UACAxE,KAAI,SAAA4H,GAAA,IAAG/I,EAAE+I,EAAF/I,GAAIK,EAAI0I,EAAJ1I,KAAMI,EAAKsI,EAALtI,MAAK,OACnBX,EAAAA,IAAC8K,EAAS,CAEN1J,OAAQb,EAAKc,KAAI,SAAAwC,GAAC,OAAIA,EAAEwF,YACxBM,cAAeA,EACfhJ,MAAOA,EACPoK,UAAWnM,GAJNsB,OAS7B,IC2IaiL,EAAatL,EAAIA,MApKO,SAAHC,GAoC5B,IAnCFgB,EAAKhB,EAALgB,MACAyE,EAAMzF,EAANyF,OACAxE,EAAIjB,EAAJiB,KACAqK,EAAKtL,EAALsL,MACAxL,EAAOE,EAAPF,QACAyL,EAASvL,EAATuL,UACAC,EAAUxL,EAAVwL,WACAC,EAAYzL,EAAZyL,aACAC,EAAW1L,EAAX0L,YACAC,EAAY3L,EAAZ2L,aACAC,EAAW5L,EAAX4L,YACAC,EAAS7L,EAAT6L,UACAC,EAAO9L,EAAP8L,QACAC,EAAa/L,EAAb+L,cACAC,EAAYhM,EAAZgM,aACAC,EAAWjM,EAAXiM,YACAC,EAAUlM,EAAVkM,WAoBAC,EAA8CC,EAAAA,aAAtCC,EAAoBF,EAApBE,qBAAsBC,EAAWH,EAAXG,YAExBC,EAAmBvD,eACrB,SAACwD,GACGH,EAAqBI,EAAaA,cAAC3M,EAAS,CAAEkB,MAAAA,EAAOC,KAAAA,IAASuL,EAAO,SACrEhB,EAAWxK,SACXyK,GAAAA,EAAezK,EAAOwL,EAC1B,GACA,CAACH,EAAsBvM,EAASkB,EAAOC,EAAMuK,EAAYC,IAGvDiB,EAAkB1D,eACpB,SAACwD,GACGH,EAAqBI,EAAaA,cAAC3M,EAAS,CAAEkB,MAAAA,EAAOC,KAAAA,IAASuL,EAAO,eACrEd,GAAAA,EAAc1K,EAAOwL,EACzB,GACA,CAACH,EAAsBvM,EAASkB,EAAOC,EAAMyK,IAG3CiB,EAAmB3D,eACrB,SAACwD,GACGF,IACAd,EAAW,YACXG,GAAAA,EAAe3K,EAAOwL,EACzB,GACD,CAACF,EAAad,EAAYG,EAAc3K,IAGtC4L,EAAkB5D,eACpB,SAACwD,SACGZ,GAAAA,EAAc5K,EAAOwL,EACzB,GACA,CAACxL,EAAO4K,IAGNiB,EAAgB7D,eAClB,SAACwD,SACGX,GAAAA,EAAY7K,EAAOwL,EACvB,GACA,CAACxL,EAAO6K,IAGNiB,EAAc9D,eAChB,SAACwD,SACGV,GAAAA,EAAU9K,EAAOwL,EACrB,GACA,CAACxL,EAAO8K,IAGNiB,EAAoB/D,eACtB,SAACwD,SACGT,GAAAA,EAAgB/K,EAAOwL,EAC3B,GACA,CAACxL,EAAO+K,IAGNiB,EAAoBhE,eACtB,SAACwD,GACGH,EAAqBI,EAAaA,cAAC3M,EAAS,CAAEkB,MAAAA,EAAOC,KAAAA,IAASuL,EAAO,SACrEhB,EAAWxK,SACXgL,GAAAA,EAAehL,EAAOwL,EAC1B,GACA,CAACvL,EAAM+K,EAAcR,EAAYa,EAAsBrL,EAAOlB,IAG5DmN,EAAmBjE,eACrB,SAACwD,GAGG,IAAMU,EAAaV,EAAMW,QAAQ,GAC3BC,EAAkBC,SAASC,iBAC7BJ,EAAWK,QACXL,EAAWM,SAGTC,EAAiC,MAAfL,OAAe,EAAfA,EAAiBM,aAAa,YACtD,GAAID,EAAiB,CAEjB,IAAMzM,EAAQyE,EAAOkD,MAAK,SAAA3H,GAAK,OAAIA,EAAMZ,KAAOqN,KAC5CzM,IACAqL,EAAqBI,EAAaA,cAAC3M,EAAS,CAAEkB,MAAAA,EAAOC,KAAAA,IAASuL,EAAO,SACrEhB,EAAWxK,GAEnB,OAIAiL,GAAAA,EAAcjL,EAAOwL,EACzB,GACA,CAACvL,EAAMgL,EAAaT,EAAYa,EAAsBrL,EAAOyE,EAAQ3F,IAGnE6N,EAAmB3E,eACrB,SAACwD,GACGF,IACAd,EAAW,YACXU,GAAAA,EAAalL,EAAOwL,EACvB,GACD,CAACF,EAAad,EAAYU,EAAYlL,IAG1C,OACId,EAAAA,IAAA,OAAA,CACI8D,EAAGhD,EAAM0E,GACTzB,EAAGjD,EAAMsD,GACTI,MAAO1D,EAAM0D,MACbC,OAAQ3D,EAAM2D,OACduG,OAAO,MACPN,YAAaU,EAAQ,EAAI,EACzBsC,cAAe,IACf1L,KAAK,MACLyI,YAAaY,GAAaD,EAAQ,IAAO,EACzCG,aAAcc,EACdb,YAAagB,EACbf,aAAcgB,EACdf,YAAagB,EACbf,UAAWgB,EACXf,QAASgB,EACTf,cAAegB,EACff,aAAcgB,EACdf,YAAagB,EACbf,WAAYyB,EACZ,WAAU3M,EAAMZ,IAG5B,ICnGayN,EAAS9N,EAAIA,MA/DO,SAAHC,GAkCxB,IAjCFyF,EAAMzF,EAANyF,OACAxE,EAAIjB,EAAJiB,KACAqK,EAAKtL,EAALsL,MACAxL,EAAOE,EAAPF,QACAgO,EAAO9N,EAAP8N,QACAtC,EAAUxL,EAAVwL,WACAC,EAAYzL,EAAZyL,aACAC,EAAW1L,EAAX0L,YACAC,EAAY3L,EAAZ2L,aACAC,EAAW5L,EAAX4L,YACAC,EAAS7L,EAAT6L,UACAC,EAAO9L,EAAP8L,QACAC,EAAa/L,EAAb+L,cACAC,EAAYhM,EAAZgM,aACAC,EAAWjM,EAAXiM,YACAC,EAAUlM,EAAVkM,WAmBA,OACIhM,EAAAA,IAAAkL,EAAAA,SAAA,CAAA7K,SACKkF,EAAOlE,KAAI,SAAAP,GAAK,OACbd,EAAAA,IAACmL,EAAU,CAEPrK,MAAOA,EACPyE,OAAQA,EACRxE,KAAMA,EACNqK,MAAOA,EACPxL,QAASA,EACT0L,WAAYA,EACZD,UAAuB,OAAZuC,GAAoBA,EAAQ1N,KAAOY,EAAMZ,GACpDqL,aAAcA,EACdC,YAAaA,EACbC,aAAcA,EACdC,YAAaA,EACbC,UAAWA,EACXC,QAASA,EACTC,cAAeA,EACfC,aAAcA,EACdC,YAAaA,EACbC,WAAYA,GAjBPlL,EAAMZ,QAsB/B,ICiDa2N,EAAShO,EAAIA,MA3GA,SAAHC,GAkCjB,IAjCFsB,EAAMtB,EAANsB,OACA0M,EAAMhO,EAANgO,OACAC,EAAIjO,EAAJiO,KACAC,EAAWlO,EAAXkO,YACAC,EAAWnO,EAAXmO,YACA1F,EAAKzI,EAALyI,MACA2F,EAAYpO,EAAZoO,aACA/K,EAAWrD,EAAXqD,YACAgL,EAAerO,EAAfqO,gBACAvO,EAAOE,EAAPF,QACAwO,EAAMtO,EAANsO,OACAC,EAASvO,EAATuO,UACAC,EAAcxO,EAAdwO,eACAC,EAAezO,EAAfyO,gBACAC,EAAU1O,EAAV0O,WACAC,EAAY3O,EAAZ2O,aAmBMC,EAAWC,oBAAkBpG,GAEnC0D,EAAuCC,EAAAA,aAA/B0C,EAAa3C,EAAb2C,cAAexC,EAAWH,EAAXG,YAGjByC,EAAezN,EAChBN,MAAM,GACNoE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAEmE,cAAgBlE,EAAEkE,aAAa,IAChDpE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEgE,YAAcjE,EAAEiE,WAAW,IAC5C/H,KAAI,SAAAtB,GACD,MAAO,CACHG,GAAIH,EAAMG,GACV4D,EAAG/D,EAAM+D,EACTC,EAAGhE,EAAMgE,EACTyE,MAAOzI,EAAMQ,KACbyB,KAAMjC,EAAMY,MACZqK,OAAQjL,EAAM0J,YACdlB,MAAO0F,EAAcS,EAAS3O,GAAS,KACvCsO,UAAWA,EAAYA,EAAUtO,QAAS+O,EAC1CR,eAAgBA,EAAiBA,EAAevO,QAAS+O,EACzDP,gBAAiBA,EAAkBA,EAAgBxO,QAAS+O,EAC5DN,WAAYA,EAAaA,EAAWzO,QAAS+O,EAC7CL,aAAcA,EAAeA,EAAa1O,QAAS+O,EACnDC,QAAS5L,EACH,WACIgL,EAAgBpO,GAChB6O,EACIrC,EAAaA,cAAC3M,EAAS,CAAEG,MAAAA,IACzB,CAACqO,EAAOY,KAAOjP,EAAM+D,EAAGsK,EAAOa,IAAMlP,EAAMgE,GAC3C,MAER,OACA+K,EACNI,OAAQ/L,EACF,WACIgL,EAAgB,MAChB/B,GACJ,OACA0C,EAEd,IAEJ,OACI9O,EAAAA,IAAA,IAAA,CAAAK,SACKwO,EAAaxN,KAAI,SAAAtB,GAAK,OACnBC,EAAAA,IAACmP,EAAAA,SAAQ,CAELrL,EAAG/D,EAAM+D,EACTC,EAAGhE,EAAMgE,EACTyE,MAAOzI,EAAMyI,MACbsF,OAAQA,EACRC,KAAMA,EACNpN,MAAOZ,EAAMiC,KACbgM,YAAaA,EACbvE,YAAa1J,EAAMiL,OACnBzC,MAAOxI,EAAMwI,MACb2F,aAAcA,EACdG,UAAWtO,EAAMsO,UACjBC,eAAgBvO,EAAMuO,eACtBC,gBAAiBxO,EAAMwO,gBACvBC,WAAYzO,EAAMyO,WAClBC,aAAc1O,EAAM0O,aACpBtL,YAAaA,EACb4L,QAAShP,EAAMgP,QACfG,OAAQnP,EAAMmP,OACdE,OAAM,cAAgBrP,EAAMG,IAnBvBH,EAAMG,QAwB/B,ICiDamP,EAAOxP,EAAIA,MA3JA,SAAHC,GAsCf,IArCFsB,EAAMtB,EAANsB,OACAoD,EAAK1E,EAAL0E,MACAC,EAAM3E,EAAN2E,OACA2J,EAAMtO,EAANsO,OACA9C,EAAUxL,EAAVwL,WACAC,EAAYzL,EAAZyL,aACAC,EAAW1L,EAAX0L,YACAC,EAAY3L,EAAZ2L,aACAC,EAAW5L,EAAX4L,YACAC,EAAS7L,EAAT6L,UACAC,EAAO9L,EAAP8L,QACAC,EAAa/L,EAAb+L,cACAC,EAAYhM,EAAZgM,aACAC,EAAWjM,EAAXiM,YACAC,EAAUlM,EAAVkM,WACApM,EAAOE,EAAPF,QACAwL,EAAKtL,EAALsL,MACAtI,EAAoBhD,EAApBgD,qBAqBAmJ,EAAuCC,EAAAA,aAA/B0C,EAAa3C,EAAb2C,cAAexC,EAAWH,EAAXG,YAEjBC,EAAmBvD,EAAAA,aACrB,SAAC/I,EAAsBuM,GACnBsC,EACIrC,EAAaA,cAAC3M,EAAS,CAAEG,MAAAA,IACzB,CAACA,EAAM+D,EAAIsK,EAAOY,KAAMjP,EAAMgE,EAAIqK,EAAOa,KACzC,aAEJ1D,GAAAA,EAAexL,EAAOuM,EACzB,GACD,CAACsC,EAAehP,EAAS2L,EAAc6C,IAGrC5B,EAAkB1D,EAAAA,aACpB,SAAC/I,EAAsBuM,GACnBsC,EACIrC,EAAaA,cAAC3M,EAAS,CAAEG,MAAAA,IACzB,CAACA,EAAM+D,EAAIsK,EAAOY,KAAMjP,EAAMgE,EAAIqK,EAAOa,KACzC,aAEJzD,GAAAA,EAAczL,EAAOuM,EACzB,GACA,CAACsC,EAAehP,EAASwO,EAAOY,KAAMZ,EAAOa,IAAKzD,IAGhDiB,EAAmB3D,EAAAA,aACrB,SAAC/I,EAAsBuM,GACnBF,UACAX,GAAAA,EAAe1L,EAAOuM,EAC1B,GACA,CAACF,EAAaX,IAGZiB,EAAkB5D,EAAAA,aACpB,SAAC/I,EAAsBuM,SACnBZ,GAAAA,EAAc3L,EAAOuM,EACzB,GACA,CAACZ,IAGCiB,EAAgB7D,EAAAA,aAClB,SAAC/I,EAAsBuM,SACnBX,GAAAA,EAAY5L,EAAOuM,EACvB,GACA,CAACX,IAGCiB,EAAc9D,EAAAA,aAChB,SAAC/I,EAAsBuM,SACnBV,GAAAA,EAAU7L,EAAOuM,EACrB,GACA,CAACV,IAGCiB,EAAoB/D,EAAAA,aACtB,SAAC/I,EAAsBuM,SACnBT,GAAAA,EAAgB9L,EAAOuM,EAC3B,GACA,CAACT,IAGCyD,EAAmBxG,EAAAA,aACrB,SAAC/I,EAAsBuM,GACnBsC,EACIrC,EAAaA,cAAC3M,EAAS,CAAEG,MAAAA,IACzB,CAACA,EAAM+D,EAAIsK,EAAOY,KAAMjP,EAAMgE,EAAIqK,EAAOa,KACzC,aAEJnD,GAAAA,EAAe/L,EAAOuM,EAC1B,GACA,CAAC8B,EAAOY,KAAMZ,EAAOa,IAAKnD,EAAc8C,EAAehP,IAGrD2P,EAAkBzG,EAAAA,aACpB,SAAC/I,EAAsBuM,GACnBsC,EACIrC,EAAaA,cAAC3M,EAAS,CAAEG,MAAAA,IACzB,CAACA,EAAM+D,EAAIsK,EAAOY,KAAMjP,EAAMgE,EAAIqK,EAAOa,KACzC,aAEJlD,GAAAA,EAAchM,EAAOuM,EACzB,GACA,CAAC8B,EAAOY,KAAMZ,EAAOa,IAAKlD,EAAa6C,EAAehP,IAGpD4P,EAAiB1G,EAAAA,aACnB,SAAC/I,EAAsBuM,GACnBF,UACAJ,GAAAA,EAAajM,EAAOuM,EACxB,GACA,CAACN,EAAYI,IAGjB,OACIpM,EAAAA,IAACyP,EAAAA,KAAQ,CACLC,MAAOtO,EACPoD,MAAOA,EACPC,OAAQA,EACR6G,WAAYA,EACZC,aAAcc,EACdb,YAAagB,EACbf,aAAcgB,EACdf,YAAagB,EACbf,UAAWgB,EACXf,QAASgB,EACTf,cAAegB,EACff,aAAcwD,EACdvD,YAAawD,EACbvD,WAAYwD,EACZ1M,qBAAsBA,EACtBsI,MAAOA,GAGnB,yECzHA,SAASuE,EACLC,GAEA,IACIrP,EAuEAqP,EAvEArP,KAAIsP,EAuEJD,EAtEAxR,OAAQgI,OAAU,IAAAyJ,EAAGhO,EAAgBzD,OAAMyR,EAC3CxJ,EAqEAuJ,EArEAvJ,QAAOyJ,EAqEPF,EApEAtR,OAAQiI,OAAU,IAAAuJ,EAAGjO,EAAgBvD,OAAMwR,EAC3CtJ,EAmEAoJ,EAnEApJ,QAAOuJ,EAmEPH,EAlEAnR,MAAAA,OAAK,IAAAsR,EAAGlO,EAAgBpD,MAAKsR,EACrBC,EAiERJ,EAjEAxB,OACA5J,EAgEAoL,EAhEApL,MACAC,EA+DAmL,EA/DAnL,OAAMwL,EA+DNL,EA9DAlR,OAAAA,OAAM,IAAAuR,EAAGpO,EAAgBnD,OAAMuR,EAAAC,EA8D/BN,EA7DAhR,UAAAA,OAAS,IAAAsR,EAAGrO,EAAgBjD,UAASsR,EAAAC,EA6DrCP,EA5DA/Q,OAAAA,OAAM,IAAAsR,EAAGtO,EAAgBhD,OAAMsR,EAAAC,EA4D/BR,EA3DAvQ,WAAAA,OAAU,IAAA+Q,EAAGvO,EAAgBxC,WAAU+Q,EAAAC,EA2DvCT,EA1DAtQ,kBAAAA,OAAiB,IAAA+Q,EAAGxO,EAAgBvC,kBAAiB+Q,EAAAC,EA0DrDV,EAzDArQ,YAAAA,OAAW,IAAA+Q,EAAGzO,EAAgBtC,YAAW+Q,EAAAC,EAyDzCX,EAxDAzN,cAAAA,OAAa,IAAAoO,EAAG1O,EAAgBM,cAAaoO,EAAAC,EAwD7CZ,EAvDA9Q,aAAAA,OAAY,IAAA0R,EAAG3O,EAAgB/C,aAAY0R,EAC3CC,EAsDAb,EAtDAa,YAAWC,EAsDXd,EArDA7Q,UAAAA,OAAS,IAAA2R,EAAG7O,EAAgB9C,UAAS2R,EAAAC,EAqDrCf,EApDA5Q,WAAAA,OAAU,IAAA2R,EAAG9O,EAAgB7C,WAAU2R,EAAAC,EAoDvChB,EAnDA1Q,iBAAAA,OAAgB,IAAA0R,EAAG/O,EAAgB3C,iBAAgB0R,EAAAC,EAmDnDjB,EAlDAzQ,iBAAAA,OAAgB,IAAA0R,EAAGhP,EAAgB1C,iBAAgB0R,EAAAC,EAkDnDlB,EA/CA3N,iBAAAA,OAAgB,IAAA6O,EAAGjP,EAAgBI,iBAAgB6O,EAAAC,GA+CnDnB,EA9CA1N,WAAAA,QAAU,IAAA6O,GAAGlP,EAAgBK,WAAU6O,GACvCC,GA6CApB,EA7CAoB,kBAAiBC,GA6CjBrB,EA5CApQ,YAAAA,QAAW,IAAAyR,GAAGpP,EAAgBrC,YAAWyR,GACzCC,GA2CAtB,EA3CAsB,YAAWC,GA2CXvB,EA1CAnQ,YAAAA,QAAW,IAAA0R,GAAGtP,EAAgBpC,YAAW0R,GACzCC,GAyCAxB,EAzCAwB,YACAhP,GAwCAwN,EAxCAxN,QACAC,GAuCAuN,EAvCAvN,UAASgP,GAuCTzB,EAtCAtN,WAAAA,QAAU,IAAA+O,GAAGxP,EAAgBS,WAAU+O,GAAAC,GAsCvC1B,EArCApN,SAAAA,QAAQ,IAAA8O,GAAGzP,EAAgBW,SAAQ8O,GAAAC,GAqCnC3B,EApCA7N,KAAAA,QAAI,IAAAwP,GAAG1P,EAAgBE,KAAIwP,GAAAC,GAoC3B5B,EAnCA5N,KAAAA,QAAI,IAAAwP,GAAG3P,EAAgBG,KAAIwP,GAC3BC,GAkCA7B,EAlCA6B,QAAOC,GAkCP9B,EAjCAlQ,QAAAA,QAAO,IAAAgS,GAAG7P,EAAgBnC,QAAOgS,GAAAC,GAiCjC/B,EAhCAjQ,cAAAA,QAAa,IAAAgS,GAAG9P,EAAgBlC,cAAagS,GAAAC,GAgC7ChC,EA/BAnN,QAAAA,QAAO,IAAAmP,GAAG/P,EAAgBY,QAAOmP,GAAAC,GA+BjCjC,EA9BAjO,UAAAA,QAAS,IAAAkQ,GAAGhQ,EAAgBF,UAASkQ,GACrCtG,GA6BAqE,EA7BArE,aACAC,GA4BAoE,EA5BApE,YACAC,GA2BAmE,EA3BAnE,aACAC,GA0BAkE,EA1BAlE,YACAC,GAyBAiE,EAzBAjE,UACAC,GAwBAgE,EAxBAhE,QACAC,GAuBA+D,EAvBA/D,cACAC,GAsBA8D,EAtBA9D,aACAC,GAqBA6D,EArBA7D,YACAC,GAoBA4D,EApBA5D,WAAU8F,GAoBVlC,EAnBAhQ,QAAAA,QAAO,IAAAkS,GAAGjQ,EAAgBjC,QAAOkS,GAAAC,GAmBjCnC,EAlBAlN,aAAAA,QAAY,IAAAqP,GAAGlQ,EAAgBa,aAAYqP,GAAAC,GAkB3CpC,EAjBAjN,YAAAA,QAAW,IAAAqP,GAAGnQ,EAAgBc,YAAWqP,GAAAC,GAiBzCrC,EAhBA/O,aAAAA,QAAY,IAAAoR,GAAGpQ,EAAgBhB,aAAYoR,GAAAC,GAgB3CtC,EAfAhN,gBAAAA,QAAe,IAAAsP,GAAGrQ,EAAgBe,gBAAesP,GAAAC,GAejDvC,EAdA/M,cAAAA,QAAa,IAAAsP,GAAGtQ,EAAgBgB,cAAasP,GAAAC,GAc7CxC,EAbA9M,qBAAAA,QAAoB,IAAAsP,GAAGvQ,EAAgBiB,qBAAoBsP,GAAAC,GAa3DzC,EAZA1M,KAAAA,QAAI,IAAAmP,GAAGxQ,EAAgBqB,KAAImP,GAC3BhE,GAWAuB,EAXAvB,UACAC,GAUAsB,EAVAtB,eACAC,GASAqB,EATArB,gBAAe+D,GASf1C,EARAzM,YAAAA,QAAW,IAAAmP,GAAGzQ,EAAgBsB,YAAWmP,GACzCC,GAOA3C,EAPA2C,eACAC,GAMA5C,EANA4C,oBACAC,GAKA7C,EALA6C,qBACAC,GAIA9C,EAJA8C,gBACAC,GAGA/C,EAHA+C,kBAAiBC,GAGjBhD,EAFA7M,iBAAAA,QAAgB,IAAA6P,GAAG/Q,EAAgBkB,iBAAgB6P,GACnDC,GACAjD,EADAiD,aAGJC,GAAqEC,EAAaA,cAC9EvO,EACAC,EACAuL,GAHI5B,GAAM0E,GAAN1E,OAAQ4E,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAAaC,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAMrDC,GAUInN,EAAgB,CAChB1F,KAAAA,EACAnC,OAAQgI,EACRC,QAAAA,EACA/H,OAAQiI,EACRC,QAAAA,EACAhC,MAAOwO,GACPvO,OAAQwO,GACRvU,OAAAA,EACAD,MAAAA,EACAa,kBAAAA,EACAN,WAAAA,EACAG,iBAAAA,EACAuD,aAAAA,GACAK,iBAAAA,KAvBA4F,GAAUyK,GAAVzK,WACAE,GAAYuK,GAAZvK,aACAc,GAAayJ,GAAbzJ,cACAC,GAAawJ,GAAbxJ,cACAzB,GAAMiL,GAANjL,OACA/J,GAAMgV,GAANhV,OACAE,GAAM8U,GAAN9U,OACAiH,GAAM6N,GAAN7N,OACAnE,GAAMgS,GAANhS,OAkBJiS,GAAwCrM,EAAQA,SAAuB,MAAhEsM,GAAYD,GAAA,GAAElF,GAAekF,GAAA,GACpC3L,GAAwCV,EAAQA,SAA2B,MAApEuM,GAAY7L,GAAA,GAAE8L,GAAe9L,GAAA,GAE9B+L,GAA4C,CAC9CC,KAAM,KACNjC,QAAS,KACTkC,KAAM,KACNC,MAAO,KACPC,UAAW,KACXC,MAAO,KACP1S,OAAQ,KACRmE,OAAQ,KACRwO,KAAM,KACNrU,QAAS,MAGTb,EAAOmV,SAAS,UAAYxU,IAAeC,MAC3CgU,GAAUC,KACN1T,EAAAM,IAAC2T,OAAI,CAEDzP,MAAOwO,GACPvO,OAAQwO,GACR7U,OAAQoB,GAAepB,GAAsB,KAC7CE,OAAQmB,GAAenB,GAAsB,KAC7C4V,QAAShD,GACTiD,QAAS/C,IANL,SAWZvS,EAAOmV,SAAS,YAAchP,MAAMoP,QAAQ3C,KAAYA,GAAQjI,OAAS,IACzEiK,GAAUhC,QACNzR,EAAAM,IAAC+T,mBAAgB,CAEb5C,QAASA,GACTjN,MAAOwO,GACPvO,OAAQwO,GACR7U,OAAQA,GACRE,OAAQA,IALJ,YAUZO,EAAOmV,SAAS,UAChBP,GAAUE,KACN3T,EAAAM,IAACgU,OAAI,CAEDlW,OAAQA,GACRE,OAAQA,GACRkG,MAAOwO,GACPvO,OAAQwO,GACRhE,IAAK7M,GACLmS,MAAOlS,GACPmS,OAAQlS,GACR0M,KAAMxM,IARF,SAaZ3D,EAAOmV,SAAS,WAChBP,GAAUK,MACN9T,EAAAM,IAAC2K,EAAK,CAEF9C,OAAQA,GACRwB,cAAeA,GACf/K,UAAWA,GAHP,UAQZC,EAAOmV,SAAS,YAActU,GAAQ8J,OAAS,IAC/CiK,GAAU/T,QACNM,EAAAM,IAACmU,WAAQ,CAAApU,SACJX,GAAQ2B,KAAI,SAACqT,EAAQpP,GAAC,OACnBtF,EAAAM,IAACqU,EAAYA,aAAA7S,KAEL4S,EAAM,CACVE,eAAgB5B,GAChB6B,gBAAiB5B,GACjB1S,KAAMmU,EAAOnU,MAAQoI,GACrBmM,YACIJ,EAAOI,YACAjM,QACDiG,IARLxJ,OAHH,YAmBtB,IAAMyP,GAAYC,EAAQA,SAACjT,GAAMoG,GAAQnG,IAErC3C,IACAoU,GAAUG,MACN5T,EAAAM,IAACsK,EAAK,CAEFhB,cAAeA,GACfrK,YAAaA,EACb4C,cAAeA,EACfgG,OAAQA,IAJJ,UASZxI,KAAkC,IAAjB+C,KACjB+Q,GAAUlO,OACNvF,EAAAM,IAACqN,EAAM,CAEHpI,OAAQA,GACRxE,KAAM2B,GACN0I,MAAOzI,GACP/C,QAASiB,GACT+M,QAAS2F,GACTjI,WAAYkI,GACZjI,aAAcA,GACdC,YAAaA,GACbC,aAAcA,GACdC,YAAaA,GACbC,UAAWA,GACXC,QAASA,GACTC,cAAeA,GACfC,aAAcA,GACdC,YAAaA,GACbC,WAAYA,IAhBR,WAqBZlN,IACA2U,GAAUrS,OACNpB,EAAAM,IAACuN,EAAM,CAEHzM,OAAQA,GACR0M,OAAQ2C,EACR1C,KAAMhP,EACNiP,YAAa9O,EACb+O,YAAahM,EACbsG,MAAOrG,GACPgM,aAAc8C,GACd7N,YAAaA,GACbgL,gBAAiBA,GACjBvO,QAASA,GACTwO,OAAQA,GACRC,UAAWkE,GACXjE,eAAgBkE,GAChBjE,gBAAiBkE,GACjBjE,WAAYkE,GACZjE,aAAckE,IAhBV,WAqBZhT,IAAiBiD,KACI,OAAjB0Q,KACAG,GAAUI,UACN7T,EAAAM,IAAC2U,YAAS,CAENzQ,MAAOwO,GACPvO,OAAQwO,GACRnP,EAAGwP,GAAaxP,EAChBC,EAAGuP,GAAavP,EAChB1F,KAAMwE,IALF,cASK,OAAjB0Q,IAAyB7Q,KACzB+Q,GAAUI,UACN7T,EAAAM,IAAC2U,YAAS,CAENzQ,MAAOwO,GACPvO,OAAQwO,GACRnP,EAAGyP,GAAazP,EAChBC,EAAGwP,GAAaxP,EAChB1F,KAAMqE,IALF,eAWhB/C,IAAiB8C,KAA4B,IAAjBC,KAC5B+Q,GAAUM,KACN/T,EAAAM,IAAC+O,EAAI,CAEDjO,OAAQA,GACRoD,MAAOwO,GACPvO,OAAQwO,GACR7E,OAAQA,GACR9C,WAAY6C,GACZ5C,aAAcA,GACdC,YAAaA,GACbC,aAAcA,GACdC,YAAaA,GACbC,UAAWA,GACXC,QAASA,GACTC,cAAeA,GACfC,aAAcA,GACdC,YAAaA,GACbC,WAAYA,GACZpM,QAASA,GACTkD,qBAAsBA,GACtBsI,MAAOzJ,IAlBH,SAuBhB,IAAMuT,GAAiDpT,EAAA,CAAA,EAC/C8N,EAAK,CACToD,WAAAA,GACAC,YAAAA,GACA9K,OAAAA,GACA5C,OAAAA,GACAnE,OAAAA,GACAhD,OAAAA,GACAE,OAAAA,GACAqL,cAAAA,GACAC,cAAAA,GACA0J,aAAAA,GACAnF,gBAAAA,GACAoF,aAAAA,GACAC,gBAAAA,KAGJ,OACIxT,EAAAA,IAACmV,EAAAA,WAAU,CACPpT,KAAMgT,GACNvQ,MAAO0O,GACPzO,OAAQ0O,GACR/E,OAAQA,GACRlL,KAAMA,GACNmL,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,GACjBpL,YAAaA,GACbiS,IAAKvC,GAAaxS,SAEjBxB,EAAOwC,KAAI,SAACgU,EAAO/P,GAChB,MAAqB,mBAAV+P,EACArV,EAAAA,IAACyU,EAAAA,SAAQ,CAAApU,SAAUgV,EAAMH,KAAV5P,GAGnBmO,GAAU4B,OAIjC,CAEO,IAAMC,EAAOC,EAAUA,YAC1B,SAAAzV,EASIsV,GAAuB,IAAAI,EAAA1V,EAPnBH,cAAAA,OAAa,IAAA6V,EAAG3T,EAAgBlC,cAAa6V,EAAAC,EAAA3V,EAC7CkD,QAAAA,OAAO,IAAAyS,EAAG5T,EAAgBmB,QAAOyS,EAAAC,EAAA5V,EACjCmD,aAAAA,OAAY,IAAAyS,EAAG7T,EAAgBoB,aAAYyS,EAC3CtW,EAAKU,EAALV,MACAwC,EAAa9B,EAAb8B,cACG+T,EAAUC,EAAA9V,EAAA+V,GAAA,OAIjB7V,EAAAA,IAAC8V,EAAAA,UAAS,CACN9S,QAASA,EACTrD,cAAeA,EACfsD,aAAcA,EACdrB,cAAeA,EACfxC,MAAOA,EAAMiB,SAEbL,EAAAA,IAAC2P,EAAS7N,EAAA,CAASnC,cAAeA,GAAmBgW,EAAU,CAAE9C,aAAcuC,MACvE,mEC1ZPW,EAAiBR,EAAUA,YACpC,SAAAzV,EAQIsV,GAAuB,IANnBY,EAAYlW,EAAZkW,aACAC,EAAanW,EAAbmW,cACAC,EAAQpW,EAARoW,SACAC,EAAcrW,EAAdqW,eACGvG,EAAKgG,EAAA9V,EAAA+V,GAAA,OAIZ7V,EAAAA,IAACoW,EAAAA,kBAAiB,CACdJ,aAAcA,EACdC,cAAeA,EACfC,SAAUA,EACVC,eAAgBA,EAAe9V,SAE9B,SAAA4I,GAAA,IAAGzE,EAAKyE,EAALzE,MAAOC,EAAMwE,EAANxE,OAAM,OACbzE,EAAAM,IAACgV,EAAIxT,EAAA,CAAS0C,MAAOA,EAAOC,OAAQA,GAAYmL,EAAK,CAAEwF,IAAKA,IAAO,GAEvD,gDCStBiB,EAAkB,SAAHvW,GA6Cf,IA5CF0E,EAAK1E,EAAL0E,MACAC,EAAM3E,EAAN2E,OACQuL,EAAalQ,EAArBsO,OAAMkI,EAAAxW,EACNuD,WAAAA,OAAU,IAAAiT,EAAGlT,EAAmBC,WAAUiT,EAC1C/V,EAAIT,EAAJS,KAAIgW,EAAAzW,EACJ1B,OAAQgI,OAAU,IAAAmQ,EAAGnT,EAAmBhF,OAAMmY,EAC9ClQ,EAAOvG,EAAPuG,QAAOmQ,EAAA1W,EACPxB,OAAQiI,OAAU,IAAAiQ,EAAGpT,EAAmB9E,OAAMkY,EAC9ChQ,EAAO1G,EAAP0G,QAAOiQ,EAAA3W,EACPrB,MAAAA,OAAK,IAAAgY,EAAGrT,EAAmB3E,MAAKgY,EAAAC,EAAA5W,EAChCjB,OAAAA,OAAM,IAAA6X,EAAGtT,EAAmBvE,OAAM6X,EAAAC,EAAA7W,EAClCpB,OAAAA,OAAM,IAAAiY,EAAGvT,EAAmB1E,OAAMiY,EAAAC,EAAA9W,EAClClB,UAAAA,OAAS,IAAAgY,EAAGxT,EAAmBxE,UAASgY,EAAAC,EAAA/W,EACxCT,WAAAA,OAAU,IAAAwX,EAAGzT,EAAmB/D,WAAUwX,EAAAC,EAAAhX,EAC1CR,kBAAAA,OAAiB,IAAAwX,EAAG1T,EAAmB9D,kBAAiBwX,EAAAC,EAAAjX,EACxDP,YAAAA,OAAW,IAAAwX,EAAG3T,EAAmB7D,YAAWwX,EAAAC,EAAAlX,EAC5ChB,aAAAA,OAAY,IAAAkY,EAAG5T,EAAmBtE,aAAYkY,EAAAC,EAAAnX,EAC9Cf,UAAAA,OAAS,IAAAkY,EAAG7T,EAAmBrE,UAASkY,EAAAC,EAAApX,EACxCd,WAAAA,OAAU,IAAAkY,EAAG9T,EAAmBpE,WAAUkY,EAAAC,EAAArX,EAC1CZ,iBAAAA,OAAgB,IAAAiY,EAAG/T,EAAmBlE,iBAAgBiY,EAAAC,EAAAtX,EACtDX,iBAAAA,OAAgB,IAAAiY,EAAGhU,EAAmBjE,iBAAgBiY,EAAAC,EAAAvX,EAGtDN,YAAAA,OAAW,IAAA6X,EAAGjU,EAAmB5D,YAAW6X,EAC5CnG,EAAWpR,EAAXoR,YAAWoG,EAAAxX,EACXL,YAAAA,OAAW,IAAA6X,EAAGlU,EAAmB3D,YAAW6X,EAC5ClG,EAAWtR,EAAXsR,YACAhP,GAAOtC,EAAPsC,QACAC,GAASvC,EAATuC,UAASkV,GAAAzX,EACTwC,WAAAA,QAAU,IAAAiV,GAAGnU,EAAmBd,WAAUiV,GAAAC,GAAA1X,EAC1C0C,SAAAA,QAAQ,IAAAgV,GAAGpU,EAAmBZ,SAAQgV,GAAAC,GAAA3X,EACtCJ,QAAAA,QAAO,IAAA+X,GAAGrU,EAAmB1D,QAAO+X,GAAAjC,GAAA1V,EACpCH,cAAAA,QAAa,IAAA6V,GAAGpS,EAAmBzD,cAAa6V,GAAAkC,GAAA5X,EAChD6B,UAAAA,QAAS,IAAA+V,GAAGtU,EAAmBzB,UAAS+V,GACxCjM,GAAY3L,EAAZ2L,aACAC,GAAW5L,EAAX4L,YACAC,GAAS7L,EAAT6L,UACAC,GAAO9L,EAAP8L,QACAC,GAAa/L,EAAb+L,cAAa8L,GAAA7X,EACbF,QAAAA,QAAO,IAAA+X,GAAGvU,EAAmBxD,QAAO+X,GACpCzU,GAAIpD,EAAJoD,KACA2P,GAAY/S,EAAZ+S,aAIM+E,GAAWC,SAAiC,MAElD/E,GAAqEC,EAAaA,cAC9EvO,EACAC,EACAuL,GAHI5B,GAAM0E,GAAN1E,OAAQ4E,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAAaC,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAK/C/T,GAAQ4B,EAAAA,WACdqS,GAAwCrM,EAAQA,SAAuB,MAAhEsM,GAAYD,GAAA,GAAElF,GAAekF,GAAA,GAEpCD,GAAyEnN,EAAgB,CACrF1F,KAAAA,EACAnC,OAAQgI,EACRC,QAAAA,EACA/H,OAAQiI,EACRC,QAAAA,EACAhC,MAAOwO,GACPvO,OAAQwO,GACRvU,OAAAA,EACAD,MAAAA,EACAa,kBAAAA,EACAN,WAAAA,EACAG,iBAAAA,IAZIwK,GAAayJ,GAAbzJ,cAAeC,GAAawJ,GAAbxJ,cAAezB,GAAMiL,GAANjL,OAAQ/J,GAAMgV,GAANhV,OAAQE,GAAM8U,GAAN9U,OAAQ8C,GAAMgS,GAANhS,OAexD8T,GAAuDxR,EAAAA,SACzD,WAAA,MAAO,CACHsP,WAAAA,GACAC,YAAAA,GACA9K,OAAAA,GACA/G,OAAAA,GACAhD,OAAAA,GACAE,OAAAA,GACAM,UAAAA,EACA+K,cAAAA,GACAC,cAAAA,GACA0J,aAAAA,GACAnF,gBAAAA,GACF,GACF,CACI6E,GACAC,GACA9K,GACA/G,GACAhD,GACAE,GACAM,EACA+K,GACAC,GACA0J,GACAnF,KAIR2J,GAA8BC,EAAAA,eAAe,CACzC3W,OAAAA,GACAoD,MAAOwO,GACPvO,OAAQwO,GACR7H,MAAOzJ,KAJHqW,GAAQF,GAARE,SAAUC,GAAOH,GAAPG,QAOlBC,EAAAA,WAAU,WACN,GAAyB,OAArBN,GAAShK,QAAb,CAEAgK,GAAShK,QAAQpJ,MAAQ0O,GAAa7P,EACtCuU,GAAShK,QAAQnJ,OAAS0O,GAAc9P,EAExC,IAAM8U,EAAMP,GAAShK,QAAQwK,WAAW,MAExCD,EAAIE,MAAMhV,EAAYA,GAEtB8U,EAAIG,UAAYlZ,GAAMmZ,WACtBJ,EAAIK,SAAS,EAAG,EAAGtF,GAAYC,IAC/BgF,EAAIM,UAAUrK,GAAOY,KAAMZ,GAAOa,KAElCpQ,EAAO8F,SAAQ,SAAA0Q,GAAS,IAAAqD,EACC,mBAAVrD,GACPA,EAAM8C,EAAKjD,IAGf,IAAMyD,EAA2CD,OAA9BA,EAAGtZ,GAAMsU,KAAK/P,KAAK+G,aAAWgO,EAAI,EAwCrD,GAvCc,SAAVrD,GAA6C,iBAAlBsD,GAA8BA,EAAgB,IACzER,EAAIvZ,UAAY+Z,EAChBR,EAAIS,YAAcxZ,GAAMsU,KAAK/P,KAAKqH,OAE9BxL,GACAqZ,EAAAA,wBAAwBV,EAAK,CACzB3T,MAAOwO,GACPvO,OAAQwO,GACRoF,MAAOja,GACP2C,KAAM,IACN+X,OAAQ5H,IAIZzR,GACAoZ,EAAAA,wBAAwBV,EAAK,CACzB3T,MAAOwO,GACPvO,OAAQwO,GACRoF,MAAO/Z,GACPyC,KAAM,IACN+X,OAAQ1H,KAKN,SAAViE,GACA0D,EAAAA,mBAAmBZ,EAAK,CACpB/Z,OAAQA,GACRE,OAAQA,GACRkG,MAAOwO,GACPvO,OAAQwO,GACRhE,IAAK7M,GACLmS,MAAOlS,GACPmS,OAAQlS,GACR0M,KAAMxM,GACNpD,MAAAA,KAIM,UAAViW,IAAoC,IAAfhW,EAAqB,CAC1C8Y,EAAIa,OACJb,EAAIc,YAAc1Z,EAElBqK,GAAcsP,QAAQf,GACtB,IAAK,IAAI7S,EAAI6C,GAAOqB,OAAS,EAAGlE,GAAK,EAAGA,IACpC6S,EAAIG,UAAYnQ,GAAO7C,GAAG3E,MAC1BwX,EAAIgB,YACJvP,GAAczB,GAAO7C,GAAG/E,KAAKc,KAAI,SAAAwC,GAAC,OAAIA,EAAEwF,QAAQ,KAChD8O,EAAInW,OAGRmW,EAAIiB,SACR,CAmCA,GAjCc,UAAV/D,IACA1L,GAAcuP,QAAQf,GACtBhQ,GAAOxD,SAAQ,SAAA2D,GACX6P,EAAIS,YAActQ,EAAW3H,MAC7BwX,EAAIvZ,UAAYA,EAChBuZ,EAAIgB,YACJxP,GAAcrB,EAAW/H,KAAKc,KAAI,SAAAwC,GAAC,OAAIA,EAAEwF,QAAQ,KACjD8O,EAAInN,QACR,KAGU,WAAVqK,IAAuC,IAAjBvW,GAAyBC,EAAY,GAC3DqC,GAAOuD,SAAQ,SAAA5E,GACXoY,EAAIG,UAAYvY,EAAMY,MACtBwX,EAAIgB,YACJhB,EAAIkB,IAAItZ,EAAM+D,EAAG/D,EAAMgE,EAAGhF,EAAY,EAAG,EAAG,EAAIua,KAAKC,IACrDpB,EAAInW,OAEA9C,EAAmB,IACnBiZ,EAAIS,YAAc7Y,EAAM0J,YACxB0O,EAAIvZ,UAAYM,EAChBiZ,EAAInN,SAEZ,IAGU,SAAVqK,IAAkC,IAAd1T,SAAkCmN,IAAZmJ,KAC1CuB,wBAAsBrB,EAAKF,IACvB3E,IACAmG,EAAAA,0BAA0BtB,EAAKF,GAAS3E,GAAa/J,WAI/C,YAAV8L,EAAqB,CACrB,IAAM1M,EAAaR,GACd9G,KAAI,SAAAqY,GAAK,MAAK,CACXxZ,GAAIwZ,EAAMxZ,GACVqI,MAAOmR,EAAMxZ,GACbS,MAAO+Y,EAAM/Y,MAChB,IACAkF,UAELnG,GAAQiF,SAAQ,SAAA+P,GACZiF,EAAAA,qBAAqBxB,EAAGrW,KACjB4S,EAAM,CACTnU,KAAMmU,EAAOnU,MAAQoI,EACrBiM,eAAgB5B,GAChB6B,gBAAiB5B,GACjB7T,MAAAA,KAER,GACJ,CACJ,GA7H+B,CA8HnC,GAAG,CACCwY,GACA5E,GACAE,GACAD,GACAE,GACA/E,GAAOY,KACPZ,GAAOa,IACP5L,EACAxE,EACAO,GACAuK,GACAxB,GACA/J,GACAE,GACAkB,EACA0R,EACAzR,EACA2R,EACAhP,GACAC,GACAC,GACAE,GACA9C,GACA0B,GACAtC,EACAC,EACAG,EACAoU,GACA4B,GACAvT,GACAtC,EACAuK,GACArK,EACAX,EACAqZ,KAGJ,IAAM2B,GAAyB9Q,eAC3B,SAACwD,GACG,IAAKsL,GAAShK,QAAS,OAAO,KAE9B,IAAAiM,EAAeC,EAAiBA,kBAAClC,GAAShK,QAAStB,GAA5CxI,EAAC+V,EAAA,GAAE9V,EAAC8V,EAAA,GACX,IAAKE,EAAcA,eAAC3L,GAAOY,KAAMZ,GAAOa,IAAK+D,GAAYC,GAAanP,EAAGC,GAAI,OAAO,KAEpF,IAAMiW,EAAahC,GAASvP,KAAK3E,EAAIsK,GAAOY,KAAMjL,EAAIqK,GAAOa,KAC7D,OAAO7N,GAAO4Y,EAClB,GACA,CAACpC,GAAUxJ,GAAQ4E,GAAYC,GAAa+E,GAAU5W,KAG1D6K,GAA8CC,EAAAA,aAAtCC,GAAoBF,GAApBE,qBAAsBC,GAAWH,GAAXG,YAExB6N,GAAmBnR,eACrB,SAACwD,GACG,IAAMvM,EAAQ6Z,GAAuBtN,GACrC6B,GAAgBpO,GAEZA,EACAoM,GAAqBI,EAAaA,cAAC3M,GAAS,CAAEG,MAAAA,IAAUuM,GAExDF,IAER,GACA,CAACwN,GAAwBzL,GAAiBhC,GAAsBC,GAAaxM,KAG3E6M,GAAmB3D,eACrB,SAACwD,GACGF,KACA+B,GAAgB,MACZmF,KAA0B,MAAZ7H,IAAAA,GAAe6H,GAAchH,GAClD,GACD,CAACF,GAAa+B,GAAiB1C,GAAc6H,KAG3C5G,GAAkB5D,eACpB,SAACwD,GACG,GAAIZ,GAAa,CACb,IAAM3L,EAAQ6Z,GAAuBtN,GACjCvM,GAAO2L,GAAY3L,EAAOuM,EAClC,CACJ,GACA,CAACsN,GAAwBlO,KAGvBiB,GAAgB7D,eAClB,SAACwD,GACG,GAAIX,GAAW,CACX,IAAM5L,EAAQ6Z,GAAuBtN,GACjCvM,GAAO4L,GAAU5L,EAAOuM,EAChC,CACJ,GACA,CAACsN,GAAwBjO,KAGvBiB,GAAc9D,eAChB,SAACwD,GACG,GAAIV,GAAS,CACT,IAAM7L,EAAQ6Z,GAAuBtN,GACjCvM,GAAO6L,GAAQ7L,EAAOuM,EAC9B,CACJ,GACA,CAACsN,GAAwBhO,KAGvBiB,GAAoB/D,eACtB,SAACwD,GACG,GAAIT,GAAe,CACf,IAAM9L,EAAQ6Z,GAAuBtN,GACjCvM,GAAO8L,GAAc9L,EAAOuM,EACpC,CACJ,GACA,CAACsN,GAAwB/N,KAG7B,OACI7L,EAAAA,IAAA,SAAA,CACIoV,IAAK8E,EAAAA,UAA6BtC,GAAU/E,IAC5CrO,MAAO0O,GAAa7P,EACpBoB,OAAQ0O,GAAc9P,EACtB9B,MAAO,CACHiD,MAAO0O,GACPzO,OAAQ0O,GACRgH,OAAQxa,GAAgB,OAAS,UAErC4L,aAAc5L,GAAgBsa,QAAmBnL,EACjDtD,YAAa7L,GAAgBsa,QAAmBnL,EAChDrD,aAAc9L,GAAgB8M,QAAmBqC,EACjDpD,YAAa/L,GAAgB+M,QAAkBoC,EAC/CnD,UAAWhM,GAAgBgN,QAAgBmC,EAC3ClD,QAASjM,GAAgBiN,QAAckC,EACvCjD,cAAelM,GAAgBkN,QAAoBiC,EACnD5L,KAAMA,IAGlB,EAEakX,EAAa7E,EAAUA,YAChC,SAAAtM,EAEImM,GAA2B,IADzBzV,EAAasJ,EAAbtJ,cAAeiC,EAAaqH,EAAbrH,cAAexC,EAAK6J,EAAL7J,MAAUwQ,EAAKgG,EAAA3M,EAAA4M,GAAA,OAG/C7V,EAAAA,IAAC8V,EAAAA,UAAS,CAAOnW,cAAAA,EAAeiC,cAAAA,EAAexC,MAAAA,EAAS4D,SAAS,EAAM3C,SACnEL,EAAAA,IAACqW,EAAevU,KAAa8N,EAAK,CAAEiD,aAAcuC,MAC1C,mECxZPiF,EAAuB9E,EAAUA,YAC1C,SAAAzV,EAQIsV,GAA2B,IANvBY,EAAYlW,EAAZkW,aACalW,EAAbmW,kBACAC,EAAQpW,EAARoW,SACAC,EAAcrW,EAAdqW,eACGvG,EAAKgG,EAAA9V,EAAA+V,GAAA,OAIZ7V,EAAAA,IAACoW,EAAAA,kBAAiB,CACdJ,aAAcA,EACdC,cAAeD,EACfE,SAAUA,EACVC,eAAgBA,EAAe9V,SAE9B,SAAA4I,GAAA,IAAGzE,EAAKyE,EAALzE,MAAOC,EAAMwE,EAANxE,OAAM,OACbzE,EAAAM,IAAC8Z,EAAUtY,EAAA,CAAS0C,MAAOA,EAAOC,OAAQA,GAAYmL,EAAK,CAAEwF,IAAKA,IAAO,GAE7D,0MCyErB,SACH7U,GAEA,YAA4CuO,IAApCvO,EAAuBkB,QACnC,sBACO,SACHlB,GAEA,YAA8CuO,IAAtCvO,EAA2Ba,MACvC"}